{"version":3,"file":"ApplicationContext-B_qAnYBt.js","sources":["../../node_modules/@sankhyalabs/core/dist/utils/ApplicationContext.js"],"sourcesContent":["/***\n * `ApplicationContext`: Utilizado para manipulação do contexto.\n * - Evitar uso da classe sem alinhamento com a arquitetura devido ao uso de variáveis globais.\n */\nexport default class ApplicationContext {\n    /**\n     * Obtém informação específica do contexto.\n     *\n     * @param key - Chave do contexto desejada.\n     * @returns - Informação do contexto desejado.\n     */\n    static getContextValue(key) {\n        return ApplicationContext.getCtx()[key];\n    }\n    /**\n    * Aplica informação no contexto.\n    *\n    * @param key - Identificador do contexto.\n    * @param value - Informação a ser inserida no contexto.\n    */\n    static setContextValue(key, value) {\n        ApplicationContext.getCtx()[key] = value;\n    }\n    /**\n     * Obtém o contexto global da aplicação sankhyacore.\n     * - Esse contexto pode ser entendido como um ponto de coesão para atores que não se conhecem poderem trocar informação. Assim, o código x busca por um possível valor no contexto. Se essa informação estiver lá, ele reage de certa forma. O código Y, sabe dessa necessidade mas não consegue passar essa informação diretamente, então atribui o valor ao contexto.\n     * @returns - Objeto com as propriedades da variável global ___snkcore___ctx___.\n     */\n    static getCtx() {\n        let ctx = window.___snkcore___ctx___;\n        if (!ctx) {\n            ctx = {};\n            window.___snkcore___ctx___ = ctx;\n        }\n        return ctx;\n    }\n}\n//# sourceMappingURL=ApplicationContext.js.map"],"names":["ApplicationContext","key","value","ctx"],"mappings":"AAIe,MAAMA,CAAmB,CAOpC,OAAO,gBAAgBC,EAAK,CACxB,OAAOD,EAAmB,OAAQ,EAACC,CAAG,CAC9C,CAOI,OAAO,gBAAgBA,EAAKC,EAAO,CAC/BF,EAAmB,OAAM,EAAGC,CAAG,EAAIC,CAC3C,CAMI,OAAO,QAAS,CACZ,IAAIC,EAAM,OAAO,oBACjB,OAAKA,IACDA,EAAM,CAAE,EACR,OAAO,oBAAsBA,GAE1BA,CACf,CACA","x_google_ignoreList":[0]}
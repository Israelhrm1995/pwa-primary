{"version":3,"file":"ClientSideExporterProvider-09dee1a3-C3mlIgga.js","sources":["../../node_modules/@sankhyalabs/ezui/dist/collection/components/ez-grid/utils/InMemoryFilterColumnDataSource.js","../../node_modules/@sankhyalabs/sankhyablocks/dist/esm/ClientSideExporterProvider-09dee1a3.js"],"sourcesContent":["import { Action, ArrayUtils, DataType, DateUtils, FieldComparator, ObjectUtils, UserInterface, } from '@sankhyalabs/core';\nimport { ColumnFilterManager } from './ColumnFilterManager';\nexport default class InMemoryFilterColumnDataSource {\n  constructor(dataUnit) {\n    this.lastAppliedFilters = [];\n    this.FILTER_COLUMN_TERM = 'FILTRO_COLUNA_';\n    this.onDataUnitAction = (action) => {\n      var _a, _b;\n      if (action.type === Action.DATA_SAVED || action.type === Action.RECORDS_REMOVED) {\n        this.originalRecords = this.dataUnit.records;\n        return;\n      }\n      if (action.type !== Action.DATA_LOADED)\n        return;\n      const appliedFilters = this.getAppliedFilterNames((_b = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.filters) !== null && _b !== void 0 ? _b : []);\n      if (this.originalRecords && ObjectUtils.equals(appliedFilters, this.lastAppliedFilters))\n        return;\n      this.originalRecords = action.payload.records;\n      this.lastAppliedFilters = appliedFilters;\n    };\n    this.dataUnit = dataUnit;\n    if (this.dataUnit.records.length > 0) {\n      this.originalRecords = this.dataUnit.records;\n    }\n    this.dataUnit.subscribe(this.onDataUnitAction);\n  }\n  getAppliedFilterNames(filters) {\n    const appliedFilters = filters.map(filter => filter.name);\n    return appliedFilters.filter(filterName => !filterName.includes(this.FILTER_COLUMN_TERM));\n  }\n  getStaticOptions(fieldName) {\n    return Promise.resolve(ColumnFilterManager.compileDistinctFromArray(fieldName, this.dataUnit, this.originalRecords));\n  }\n  fetchData(filterTerm, fieldName) {\n    return new Promise(resolve => {\n      const filteredRecords = this.originalRecords.filter(record => this.includesSearchTerm(record, fieldName, filterTerm));\n      const options = filteredRecords.map(item => this.buildFieldOption(item, fieldName));\n      resolve(this.removeDuplicatedOptions(options));\n    });\n  }\n  sortItems(fieldName, items) {\n    return InMemoryFilterColumnDataSource.defaultSorterMultSelectionOption(this.dataUnit, fieldName, items);\n  }\n  buildFieldOption(item, fieldName) {\n    return {\n      value: this.buildValue(item, fieldName),\n      label: this.formatLabel(fieldName, item[fieldName]),\n      check: true,\n    };\n  }\n  buildValue(item, fieldName) {\n    var _a;\n    let value = item[fieldName];\n    if (((_a = this.dataUnit.getField(fieldName)) === null || _a === void 0 ? void 0 : _a.dataType) === DataType.OBJECT) {\n      value = value.value;\n    }\n    return value === null || value === void 0 ? void 0 : value.toString();\n  }\n  removeDuplicatedOptions(options) {\n    const noDuplicatedOptions = [];\n    options.forEach(option => {\n      if (!noDuplicatedOptions.find(({ label }) => label === option.label)) {\n        noDuplicatedOptions.push(option);\n      }\n    });\n    return noDuplicatedOptions;\n  }\n  includesSearchTerm(record, fieldName, filterTerm) {\n    let label = this.buildLabel(fieldName, record[fieldName]);\n    return label.toLowerCase().includes(filterTerm.toLowerCase());\n  }\n  buildLabel(fieldName, value) {\n    var _a;\n    const { dataType } = this.dataUnit.getField(fieldName);\n    if (dataType === DataType.NUMBER) {\n      return value === null || value === void 0 ? void 0 : value.toString().replace('.', ',');\n    }\n    if (dataType === DataType.DATE) {\n      return (typeof value === 'object')\n        ? (_a = DateUtils.formatDate(this.dataUnit.valueFromString(fieldName, value))) === null || _a === void 0 ? void 0 : _a.toString()\n        : value === null || value === void 0 ? void 0 : value.toString();\n    }\n    if (dataType === DataType.OBJECT) {\n      return `${value === null || value === void 0 ? void 0 : value.value} - ${value === null || value === void 0 ? void 0 : value.label}`;\n    }\n    return value === null || value === void 0 ? void 0 : value.toString();\n  }\n  formatLabel(fieldName, value) {\n    var _a, _b;\n    const { userInterface, dataType } = this.dataUnit.getField(fieldName);\n    if (dataType === DataType.DATE) {\n      return (typeof value === 'object')\n        ? DateUtils.formatDate(this.dataUnit.valueFromString(fieldName, value))\n        : value === null || value === void 0 ? void 0 : value.toString();\n    }\n    if (dataType === DataType.NUMBER && userInterface !== UserInterface.DECIMALNUMBER) {\n      return (_a = parseInt(this.dataUnit.getFormattedValue(fieldName, value))) === null || _a === void 0 ? void 0 : _a.toString();\n    }\n    return (_b = this.dataUnit.getFormattedValue(fieldName, value)) === null || _b === void 0 ? void 0 : _b.toString();\n  }\n  static defaultSorterMultSelectionOption(dataUnit, fieldName, items) {\n    const fieldDescriptor = dataUnit.getField(fieldName);\n    if (fieldDescriptor == undefined) {\n      return ArrayUtils.sortAlphabetically(items);\n    }\n    return items.sort((itemA, itemB) => {\n      return FieldComparator.compareValues(fieldDescriptor, itemA.value, itemB.value);\n    });\n  }\n}\n","import { D as DataFetcher } from './DataFetcher-db08cad0.js';\nimport './ISave-da565824.js';\nimport { SortMode, ApplicationContext, UserInterface, DateUtils, ObjectUtils, StringUtils, NumberUtils, DataType } from '@sankhyalabs/core';\nimport { D as DataExporterOption } from './index-b40568ff.js';\nimport '@sankhyalabs/ezui/dist/collection/utils/constants';\nimport { UserInterface as UserInterface$1 } from '@sankhyalabs/core/dist/dataunit/metadata/UnitMetadata';\nimport { P as PreloadManager } from './dataunit-fetcher-1b78797a.js';\nimport './filter-item-type.enum-d45e026f.js';\nimport './form-config-fetcher-e623539b.js';\nimport './constants-7b422de0.js';\nimport InMemoryFilterColumnDataSource from '@sankhyalabs/ezui/dist/collection/components/ez-grid/utils/InMemoryFilterColumnDataSource';\nimport { h } from './index-479e1293.js';\nimport { g as getSelectedRecordsIDsInfo } from './GetSelectedRecordsIDsInfo-9fa41508.js';\nimport { I as IExportType } from './IFetchDataExporterParams-d73bed3d.js';\n\nclass CrudUtils {\n  static assertDefaultSorting(gridConfig, dataUnit) {\n    if (gridConfig && dataUnit) {\n      dataUnit.defaultSorting = gridConfig\n        .columns\n        .filter(col => col.ascending != undefined)\n        .sort((colA, colB) => colA.orderIndex - colB.orderIndex)\n        .map(({ name: field, ascending }) => {\n        const { dataType } = dataUnit.getField(field);\n        return { field, dataType, mode: ascending ? SortMode.ASC : SortMode.DESC };\n      });\n    }\n  }\n  static parseCrudResults(entities, onlyFirst) {\n    if (!Array.isArray(entities)) {\n      entities = [entities];\n    }\n    const crudFindResults = [];\n    for (const entity of entities) {\n      let crudFindResult = {\n        fields: new Map()\n      };\n      for (let key in entity) {\n        let fieldValue = entity[key];\n        if (fieldValue.hasOwnProperty('$')) {\n          crudFindResult.fields.set(key, fieldValue.$);\n        }\n        if (onlyFirst) {\n          break;\n        }\n      }\n      crudFindResults.push(crudFindResult);\n    }\n    return crudFindResults.length > 1 ? crudFindResults : crudFindResults[0];\n  }\n  static find(entityName, fields, criteria, onlyFirst = true, criteriaExpression, orderBy) {\n    const SERVICE_CRUD_FIND = \"mge@crud.find\";\n    let parsedFields = [];\n    let parsedCriteria = [];\n    let literalCriteria = {};\n    let application = ApplicationContext.getContextValue(\"__SNK__APPLICATION__\");\n    if (fields) {\n      if (!Array.isArray(fields)) {\n        throw new Error(application.messagesBuilder.getMessage(\"crudUtils.errorArray\", null));\n      }\n      fields.forEach((fieldName) => {\n        parsedFields.push({\n          name: fieldName\n        });\n      });\n    }\n    if (criteria) {\n      for (const key in criteria) {\n        if (criteria.hasOwnProperty(key)) {\n          parsedCriteria.push({ nome: key, valor: criteria[key] });\n        }\n      }\n    }\n    if (criteriaExpression) {\n      literalCriteria = {\n        expression: {\n          $: criteriaExpression\n        }\n      };\n    }\n    let request = {\n      requestBody: {\n        entity: {\n          name: entityName,\n          criterio: parsedCriteria,\n          fields: {\n            field: parsedFields\n          },\n          literalCriteria: literalCriteria,\n          orderby: orderBy\n        }\n      }\n    };\n    return new Promise((resolve) => {\n      DataFetcher.get().callServiceBroker(SERVICE_CRUD_FIND, JSON.stringify(request)).then((result) => {\n        var _a;\n        let entities = (_a = result.entidades) === null || _a === void 0 ? void 0 : _a.entidade;\n        if (!entities) {\n          resolve(null);\n        }\n        const crudFindResults = this.parseCrudResults(entities, onlyFirst);\n        resolve(crudFindResults);\n      });\n    });\n  }\n}\n\nclass SnkMultiSelectionListDataSource {\n  setDataUnit(dataUnit) {\n    this._dataUnit = dataUnit;\n  }\n  setApplication(application) {\n    this._application = application;\n  }\n  formatLabel(fieldName, value) {\n    const { userInterface } = this._dataUnit.getField(fieldName);\n    if (userInterface === UserInterface.DATETIME) {\n      return DateUtils.formatDate(this._dataUnit.valueFromString(fieldName, value));\n    }\n    return String(this._dataUnit.getFormattedValue(fieldName, value));\n  }\n  async getStaticOptions(fieldName, options) {\n    if (fieldName == undefined) {\n      return Promise.resolve(undefined);\n    }\n    return Promise.resolve(await PreloadManager.getDistinct(this._dataUnit, fieldName, options === null || options === void 0 ? void 0 : options.onlyLabel));\n  }\n  fetchData(filterTerm, fieldName) {\n    return new Promise(resolve => {\n      this._application.executeSelectDistinct(this._dataUnit, fieldName, filterTerm).then(result => {\n        resolve(result.map(item => {\n          const field = this._dataUnit.getField(fieldName);\n          if (field.userInterface === UserInterface.SEARCH) {\n            return Object.assign(Object.assign({}, JSON.parse(item)), { check: true });\n          }\n          return { value: item, label: this.formatLabel(fieldName, item), check: true };\n        }));\n      });\n    });\n  }\n  sortItems(fieldName, items) {\n    return InMemoryFilterColumnDataSource.defaultSorterMultSelectionOption(this._dataUnit, fieldName, items);\n  }\n}\n\nclass RmPrecisionCustomValueFormatter {\n  setGrid(grid) {\n    if (this._grid) {\n      return;\n    }\n    this._grid = grid;\n    this.refreshSelectedRows();\n  }\n  setDataState(dataState) {\n    if (this._dataState && ObjectUtils.equals(dataState === null || dataState === void 0 ? void 0 : dataState.metadataByRow, this._dataState.metadataByRow)) {\n      return;\n    }\n    this._dataState = dataState;\n    this.refreshSelectedRows();\n  }\n  format(currentValue, column, recordId) {\n    var _a;\n    if (StringUtils.isEmpty(currentValue)) {\n      return currentValue;\n    }\n    const rowMetadata = (_a = this._dataState) === null || _a === void 0 ? void 0 : _a.metadataByRow.get(recordId);\n    const rmPrecision = rowMetadata === null || rowMetadata === void 0 ? void 0 : rowMetadata.getProp('rm_precision', column.name);\n    if (rmPrecision || rmPrecision === 0) {\n      return NumberUtils.format(currentValue, rmPrecision, rmPrecision);\n    }\n    const columnProps = column === null || column === void 0 ? void 0 : column.props;\n    if (columnProps) {\n      const precision = column === null || column === void 0 ? void 0 : column.props.get('precision');\n      const prettyPrecision = column === null || column === void 0 ? void 0 : column.props.get('prettyPrecision');\n      if (precision !== undefined && prettyPrecision !== undefined) {\n        return NumberUtils.format(currentValue, precision, prettyPrecision);\n      }\n    }\n    return currentValue;\n  }\n  refreshSelectedRows() {\n    var _a;\n    (_a = this._grid) === null || _a === void 0 ? void 0 : _a.refreshSelectedRows();\n  }\n}\n\nclass CommonsExporter {\n  constructor(dataUnit, grid) {\n    this.MAX_WIDTH_COD = 60;\n    this.MIN_WIDTH_COD = 10;\n    this.DEFAULT_FONT_SIZE = 13;\n    this.dataUnit = dataUnit;\n    this.grid = grid;\n  }\n  async getColumnsMetadata() {\n    var _a;\n    this.columnsState = await ((_a = this.grid) === null || _a === void 0 ? void 0 : _a.getColumnsState()) || [];\n    return await this.buildColumnsMetadata(this.columnsState);\n  }\n  getColumnsState() {\n    return this.columnsState;\n  }\n  async buildColumnsMetadata(gridColumns) {\n    var _a, _b, _c;\n    const columnsMetadata = [];\n    for (const column of gridColumns) {\n      /**\n       * TODO: Analisar e criar uma melhor forma de tratar essa validação do \"RECDESP\".\n       */\n      if (column.hidden && column.name !== \"RECDESP\") {\n        continue;\n      }\n      const fieldData = (_a = this.dataUnit) === null || _a === void 0 ? void 0 : _a.getField(column.name);\n      const customFormatter = await this.grid.getCustomValueFormatter(column.name);\n      const isUserInterfaceSEARCH = (fieldData === null || fieldData === void 0 ? void 0 : fieldData.userInterface) === UserInterface$1.SEARCH;\n      const widthColumnDefault = 60;\n      const labelColumn = isUserInterfaceSEARCH ? \"Cód. \" : column.label;\n      let descriptionColumn = undefined;\n      let columnData = {\n        id: column.name,\n        label: labelColumn,\n        width: isUserInterfaceSEARCH ? (labelColumn.length * this.DEFAULT_FONT_SIZE) : column.width,\n        type: fieldData === null || fieldData === void 0 ? void 0 : fieldData.dataType,\n        userInterface: fieldData === null || fieldData === void 0 ? void 0 : fieldData.userInterface,\n        customFormatter\n      };\n      if (isUserInterfaceSEARCH && ((_b = fieldData === null || fieldData === void 0 ? void 0 : fieldData.properties) === null || _b === void 0 ? void 0 : _b.DESCRIPTIONFIELD) != undefined) {\n        const labelDescription = (_c = fieldData === null || fieldData === void 0 ? void 0 : fieldData.properties) === null || _c === void 0 ? void 0 : _c.DESCRIPTIONENTITY;\n        const mergedFrom = fieldData.properties.mergedFrom;\n        const descriptionField = `${fieldData.properties.ENTITYNAME}.${fieldData.properties.DESCRIPTIONFIELD}`;\n        descriptionColumn = {\n          id: `${mergedFrom ? (mergedFrom + \".\") : \"\"}${descriptionField}`,\n          label: labelDescription,\n          width: isUserInterfaceSEARCH && labelDescription ? (labelDescription.length * this.DEFAULT_FONT_SIZE - widthColumnDefault) : column.width,\n          type: DataType.TEXT,\n          userInterface: UserInterface$1.LONGTEXT,\n          descriptionFrom: fieldData.name\n        };\n        const newWidth = this.getWidthByMetaData(column === null || column === void 0 ? void 0 : column.width, columnData === null || columnData === void 0 ? void 0 : columnData.width, descriptionColumn === null || descriptionColumn === void 0 ? void 0 : descriptionColumn.width);\n        columnData = Object.assign(Object.assign({}, columnData), { width: newWidth === null || newWidth === void 0 ? void 0 : newWidth.codWidth });\n        descriptionColumn = Object.assign(Object.assign({}, descriptionColumn), { width: newWidth === null || newWidth === void 0 ? void 0 : newWidth.descWidth, label: (descriptionColumn === null || descriptionColumn === void 0 ? void 0 : descriptionColumn.label) || (column === null || column === void 0 ? void 0 : column.label) });\n      }\n      columnsMetadata.push(columnData);\n      if (descriptionColumn)\n        columnsMetadata.push(descriptionColumn);\n    }\n    return columnsMetadata || [];\n  }\n  getWidthByMetaData(maxWidth, widthCod, widthDescription) {\n    const totalCurrentWidth = widthCod + widthDescription;\n    const codPercentage = widthCod / totalCurrentWidth;\n    const descPercentage = widthDescription / totalCurrentWidth;\n    let newWidthCod = Math.round(maxWidth * codPercentage);\n    let newWidthDescription = Math.round(maxWidth * descPercentage);\n    if (newWidthCod > this.MAX_WIDTH_COD) {\n      newWidthCod = this.MAX_WIDTH_COD;\n      newWidthDescription = maxWidth - this.MAX_WIDTH_COD;\n    }\n    else if (newWidthCod < this.MIN_WIDTH_COD) {\n      newWidthCod = this.MIN_WIDTH_COD;\n      newWidthDescription = maxWidth - this.MIN_WIDTH_COD;\n    }\n    return {\n      codWidth: newWidthCod,\n      descWidth: newWidthDescription\n    };\n  }\n}\n\nclass ContinuousInsertUtils {\n  constructor(snkApplication, resourceID, configName) {\n    this.snkApplication = snkApplication;\n    this.keyConfigEnableContinuousInsert = `${resourceID}enableContinuousInsert${configName ? configName : ''}`;\n  }\n  handleSaveConfig(enableContinuousInsert) {\n    return this.snkApplication.saveConfig(this.keyConfigEnableContinuousInsert, enableContinuousInsert);\n  }\n  getConfig() {\n    return this.snkApplication.getConfig(this.keyConfigEnableContinuousInsert).then(value => {\n      if (value) {\n        return value == \"true\" ? true : false;\n      }\n      return false;\n    }).catch(() => {\n      return false;\n    });\n  }\n  actionContinuousInsert(enableContinuousInsert, handleEnableContinuousInsert) {\n    return {\n      value: StringUtils.generateUUID(),\n      label: enableContinuousInsert ? 'Desativar inclusão contínua' : 'Ativar inclusão contínua',\n      enabled: true,\n      itemBuilder: () => {\n        return (h(\"div\", { class: \"ez-dropdown__item-wrapper\", onClick: handleEnableContinuousInsert },\n          h(\"span\", { class: \"ez-dropdown__item-label\" }, enableContinuousInsert ? 'Desativar inclusão contínua' : 'Ativar inclusão contínua')));\n      },\n    };\n  }\n}\n\nclass ClientSideExporterProvider extends CommonsExporter {\n  getSelectedNumber() {\n    return this.dataUnit.getSelectionInfo().length;\n  }\n  getTotalRecords() {\n    var _a, _b, _c;\n    const { total } = ((_a = this.dataUnit) === null || _a === void 0 ? void 0 : _a.getPaginationInfo()) || {};\n    return total !== null && total !== void 0 ? total : (_c = (_b = this.dataUnit) === null || _b === void 0 ? void 0 : _b.records) === null || _c === void 0 ? void 0 : _c.length;\n  }\n  getSelectedIDs() {\n    return getSelectedRecordsIDsInfo(this.dataUnit);\n  }\n  getRecordID() {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.dataUnit) === null || _a === void 0 ? void 0 : _a.records) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.__record__id__;\n  }\n  async getRecords(exportType) {\n    if (this.dataUnit.records.length === 0)\n      return [];\n    switch (exportType) {\n      case IExportType.ALL:\n        return this.dataUnit.getSelectionInfo().getAllRecords();\n      case IExportType.SELECTION:\n        return this.resolveRecordsFromSelection();\n      case IExportType.PAGE:\n        return this.dataUnit.records;\n      default:\n        return this.resolveRecordsFromSelection();\n    }\n  }\n  resolveRecordsFromSelection() {\n    const selectionInfo = this.dataUnit.getSelectionInfo();\n    const selectionRecords = selectionInfo.isEmpty() || selectionInfo.isAllRecords() ? selectionInfo.getAllRecords() : selectionInfo.records;\n    return selectionRecords.length ? selectionRecords : this.dataUnit.records;\n  }\n  getHiddenOptions() {\n    return [\n      DataExporterOption.EXPORT_BY_EMAIL,\n      DataExporterOption.EXPORT_PDF_TO_EMAIL,\n      DataExporterOption.EXPORT_XLS_TO_EMAIL,\n      DataExporterOption.EXPORT_PAGE_TO_PDF,\n      DataExporterOption.EXPORT_PAGE_TO_XLS\n    ];\n  }\n  formatValue(record, column) {\n    const { id, descriptionFrom } = column;\n    const value = record[descriptionFrom || id];\n    if (value == undefined) {\n      return \"\";\n    }\n    if (descriptionFrom != undefined) {\n      return value.label;\n    }\n    const fieldDescriptor = this.dataUnit.getField(id);\n    if (fieldDescriptor.userInterface === UserInterface.SEARCH) {\n      return value.value;\n    }\n    if (column.customFormatter) {\n      const ezGridColumn = this.getColumnsState().find(columnState => column.id === columnState.name);\n      const formattedValue = column.customFormatter.format(value, ezGridColumn, record.__record__id__);\n      return formattedValue;\n    }\n    return this.dataUnit.getFormattedValue(id, value);\n  }\n}\n\nexport { CommonsExporter as C, RmPrecisionCustomValueFormatter as R, SnkMultiSelectionListDataSource as S, CrudUtils as a, ContinuousInsertUtils as b, ClientSideExporterProvider as c };\n"],"names":["InMemoryFilterColumnDataSource","dataUnit","action","_a","_b","Action","appliedFilters","ObjectUtils","filters","filter","filterName","fieldName","ColumnFilterManager","filterTerm","resolve","options","record","item","items","value","DataType","noDuplicatedOptions","option","label","dataType","DateUtils","userInterface","UserInterface","fieldDescriptor","ArrayUtils","itemA","itemB","FieldComparator","CrudUtils","gridConfig","col","colA","colB","field","ascending","SortMode","entities","onlyFirst","crudFindResults","entity","crudFindResult","key","fieldValue","entityName","fields","criteria","criteriaExpression","orderBy","SERVICE_CRUD_FIND","parsedFields","parsedCriteria","literalCriteria","application","ApplicationContext","request","DataFetcher","result","SnkMultiSelectionListDataSource","PreloadManager","RmPrecisionCustomValueFormatter","grid","dataState","currentValue","column","recordId","StringUtils","rowMetadata","rmPrecision","NumberUtils","precision","prettyPrecision","CommonsExporter","gridColumns","_c","columnsMetadata","fieldData","customFormatter","isUserInterfaceSEARCH","UserInterface$1","widthColumnDefault","labelColumn","descriptionColumn","columnData","labelDescription","mergedFrom","descriptionField","newWidth","maxWidth","widthCod","widthDescription","totalCurrentWidth","codPercentage","descPercentage","newWidthCod","newWidthDescription","ContinuousInsertUtils","snkApplication","resourceID","configName","enableContinuousInsert","handleEnableContinuousInsert","h","ClientSideExporterProvider","total","getSelectedRecordsIDsInfo","exportType","IExportType","selectionInfo","selectionRecords","DataExporterOption","id","descriptionFrom","ezGridColumn","columnState"],"mappings":"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","x_google_ignoreList":[0,1]}
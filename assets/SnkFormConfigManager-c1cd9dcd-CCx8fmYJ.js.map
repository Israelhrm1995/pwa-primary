{"version":3,"file":"SnkFormConfigManager-c1cd9dcd-CCx8fmYJ.js","sources":["../../node_modules/@sankhyalabs/sankhyablocks/dist/esm/SnkFormConfigManager-c1cd9dcd.js"],"sourcesContent":["import { C as ConfigStorage } from './ConfigStorage-cf578768.js';\nimport { ObjectUtils, StringUtils } from '@sankhyalabs/core';\nimport { F as FormConfigFetcher } from './form-config-fetcher-e623539b.js';\nimport { a as TAB_NAMES } from './constants-7b422de0.js';\n\nclass SnkFormConfigManager {\n  constructor(configName, resourceID, onConfigChange, dataUnit) {\n    this._resourceID = resourceID;\n    this._configName = configName;\n    this._onConfigChange = onConfigChange;\n    this._dataUnit = dataUnit;\n  }\n  addFormLegacyConfig(legacyConfigName) {\n    if (this._configName) {\n      ConfigStorage.addFormLegacyConfig(this._configName, legacyConfigName);\n    }\n  }\n  async loadConfig() {\n    return new Promise(resolve => {\n      ConfigStorage.loadFormConfig(this._configName, this._resourceID)\n        .then((config) => {\n        config = this.buildFormMetadataUITabs(config);\n        this.setConfig(config);\n        resolve(config);\n      })\n        .catch((error) => {\n        console.warn(error);\n      });\n    });\n  }\n  getEmptyConfig() {\n    return this.buildFormMetadataUITabs({ fields: [], emptyConfig: true }, true);\n  }\n  saveConfig(config) {\n    const configToSave = ObjectUtils.copy(config);\n    return new Promise(accept => {\n      ConfigStorage.saveFormConfig(config, this._configName, this._resourceID)\n        .then((response) => {\n        this.setConfig(Object.assign(Object.assign({}, configToSave), response));\n        accept(Object.assign(Object.assign({}, configToSave), response));\n      });\n    });\n  }\n  saveCardState(cardId, cardConfig, propertyChanged) {\n    return new Promise(resolve => {\n      var _a;\n      const cardsState = ((_a = this._config) === null || _a === void 0 ? void 0 : _a.cardsState) || new Map;\n      const currentConfig = cardsState.get(cardId);\n      cardsState.set(cardId, propertyChanged === \"fixed\" ?\n        this.updateFixSequence(Object.assign(Object.assign({}, currentConfig), { fixed: cardConfig.fixed }), cardsState)\n        : Object.assign(Object.assign({}, currentConfig), { [propertyChanged]: cardConfig[propertyChanged] }));\n      ConfigStorage.saveCardState(cardsState, this._configName, this._resourceID)\n        .then(savedCardConfig => {\n        this._config = Object.assign(Object.assign({}, this._config), { cardsState });\n        resolve(savedCardConfig);\n      });\n    });\n  }\n  updateFixSequence(updatingCardConfig, cardsState) {\n    let maxSequence = -1;\n    Array.from(cardsState.values()).forEach(cardConfig => {\n      if (!cardConfig.fixed) {\n        delete updatingCardConfig.fixSequence;\n      }\n      if (cardConfig.fixSequence != undefined) {\n        maxSequence = Math.max(maxSequence, cardConfig.fixSequence);\n      }\n    });\n    if (updatingCardConfig.fixed) {\n      updatingCardConfig.fixSequence = maxSequence + 1;\n    }\n    else {\n      delete updatingCardConfig.fixSequence;\n    }\n    return updatingCardConfig;\n  }\n  hasConfig(config) {\n    var _a;\n    const currentConfig = config !== null && config !== void 0 ? config : this._config;\n    if (currentConfig && ((_a = currentConfig.fields) === null || _a === void 0 ? void 0 : _a.length)) {\n      return true;\n    }\n    return false;\n  }\n  getFieldsList(descriptionFilter, forceEmptyConfig = false) {\n    var _a;\n    const fields = (_a = this._config) === null || _a === void 0 ? void 0 : _a.fields;\n    const hasConfig = this.hasConfig();\n    if (hasConfig && !forceEmptyConfig) {\n      return fields.map(({ label, name, readOnly, visible, required, tab, group }) => {\n        var _a;\n        if (label == undefined) {\n          const currentField = (_a = this._dataUnit) === null || _a === void 0 ? void 0 : _a.getField(name);\n          if (!currentField)\n            return;\n          return Object.assign(Object.assign({}, currentField), { name: name !== null && name !== void 0 ? name : currentField.name, readOnly: readOnly !== null && readOnly !== void 0 ? readOnly : currentField.readOnly, visible: visible !== null && visible !== void 0 ? visible : currentField.visible, required: required !== null && required !== void 0 ? required : currentField.required, tab: tab, group: group });\n        }\n        return { name, label, readOnly, visible, required, tab, group };\n      })\n        .filter(field => this.isFieldVisible(field, descriptionFilter));\n    }\n    if (!this._dataUnit) {\n      return [];\n    }\n    const filteredFields = this._dataUnit.metadata.fields\n      .filter(field => this.isFieldVisible(field, descriptionFilter))\n      .map(({ label, name, readOnly, visible, required, properties }) => ({ label, name, readOnly, visible, required, tab: properties === null || properties === void 0 ? void 0 : properties.UITabName }));\n    return filteredFields;\n  }\n  isFieldVisible(field, descriptionFilter) {\n    if (field === undefined || field.visible === false) {\n      return false;\n    }\n    if (descriptionFilter == undefined) {\n      return true;\n    }\n    const normalizedText = StringUtils.replaceAccentuatedCharsLower((field.label || field.name).toLocaleLowerCase());\n    const normalizedFilter = StringUtils.replaceAccentuatedCharsLower(descriptionFilter.toLocaleLowerCase());\n    return normalizedText.includes(normalizedFilter);\n  }\n  getFormConfig(dataUnit, ignoreReadOnlyFormFields, forceEmptyConfig = false) {\n    let fields = this.getFieldsList(undefined, forceEmptyConfig);\n    if (ignoreReadOnlyFormFields) {\n      fields = fields.filter(field => {\n        if (dataUnit) {\n          const def = dataUnit.getField(field.name);\n          if (def && def.readOnly) {\n            return false;\n          }\n        }\n        return !field.readOnly;\n      });\n    }\n    return Object.assign(Object.assign({}, this._config), { fields });\n  }\n  setConfig(config) {\n    this.isLoaded = true;\n    const { cardsState, summary, defaultVars } = this._config || {};\n    this._config = Object.assign({}, config);\n    if (cardsState) {\n      this._config.cardsState = cardsState;\n    }\n    if (summary) {\n      this._config.summary = summary;\n    }\n    if (defaultVars) {\n      this._config.defaultVars = defaultVars;\n    }\n    if (this._onConfigChange) {\n      this._onConfigChange(Object.assign({}, this._config));\n    }\n  }\n  getConfig(dataUnit, ignoreReadOnlyFormFields) {\n    return this.getFormConfig(dataUnit, ignoreReadOnlyFormFields !== null && ignoreReadOnlyFormFields !== void 0 ? ignoreReadOnlyFormFields : true);\n  }\n  getFormConfigFetcher() {\n    if (this._formConfigFetcher == undefined) {\n      this._formConfigFetcher = new FormConfigFetcher();\n    }\n    return this._formConfigFetcher;\n  }\n  async fetchUserAvailableConfigs() {\n    if (this._configName != undefined) {\n      //FIXME: Precisamos preparar o backend para retornar as configurações disponíveis para details;\n      return Promise.resolve(undefined);\n    }\n    return this.getFormConfigFetcher().fetchUserAvailableConfigs(this._configName, this._resourceID);\n  }\n  async fetchLegacyConfig() {\n    return this.getFormConfigFetcher().fetchLegacyConfig(this._configName, this._resourceID);\n  }\n  async fetchDefaultConfig() {\n    return this.getFormConfigFetcher().fetchDefaultConfig(this._configName, this._resourceID);\n  }\n  parseObjectList(object) {\n    if (!object) {\n      return [];\n    }\n    return Array.isArray(object) ? object : [object];\n  }\n  buildFormMetadataUITabs(config, forceEmptyConfig = false) {\n    var _a;\n    const hasConfig = this.hasConfig(config);\n    if (!forceEmptyConfig && (!this._dataUnit || hasConfig)) {\n      return config;\n    }\n    config = this.getFormConfig(this._dataUnit, false, true);\n    config.tabs = this.parseObjectList(config.tabs);\n    config.emptyConfig = false;\n    config.defaultConfiguration = true;\n    const fields = this._dataUnit.metadata.fields;\n    for (const currentField of fields) {\n      const field = config.fields.find(field => field.name === currentField.name);\n      const uiTabName = (_a = currentField.properties) === null || _a === void 0 ? void 0 : _a.UITabName;\n      if (!uiTabName || uiTabName === TAB_NAMES.main) {\n        continue;\n      }\n      const haveTab = config.tabs.some((tab) => tab.label === uiTabName);\n      if (!haveTab) {\n        config.tabs.push({\n          label: uiTabName,\n          name: uiTabName,\n          order: 0,\n          visible: true,\n        });\n      }\n      if (field) {\n        field.tab = uiTabName;\n      }\n    }\n    return config;\n  }\n}\n\nexport { SnkFormConfigManager as S };\n"],"names":["SnkFormConfigManager","configName","resourceID","onConfigChange","dataUnit","legacyConfigName","ConfigStorage","resolve","config","error","configToSave","ObjectUtils","accept","response","cardId","cardConfig","propertyChanged","_a","cardsState","currentConfig","savedCardConfig","updatingCardConfig","maxSequence","descriptionFilter","forceEmptyConfig","fields","label","name","readOnly","visible","required","tab","group","currentField","field","properties","normalizedText","StringUtils","normalizedFilter","ignoreReadOnlyFormFields","def","summary","defaultVars","FormConfigFetcher","object","hasConfig","uiTabName","TAB_NAMES"],"mappings":"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","x_google_ignoreList":[0]}
{"version":3,"file":"dataunit-fetcher-1b78797a-BxTYGdUG.js","sources":["../../node_modules/@sankhyalabs/ezui/dist/collection/utils/constants.js","../../node_modules/@sankhyalabs/ezui/dist/collection/components/ez-grid/utils/ColumnFilterManager.js","../../node_modules/@sankhyalabs/sankhyablocks/dist/esm/dataunit-fetcher-1b78797a.js"],"sourcesContent":["export const ALL_RECORD = \"ALL_RECORD\";\nexport const DISTINCT_FILTER_NAME_PREFIX = 'FILTRO_COLUNA_';\nexport const EZ_GRID_LOADING_SOURCE = \"EZ_GRID_LOADING_SOURCE\";\nexport const PRESENTATION_COL_ID_PROP_NAME = \"gridDescriptionColID\";\nexport const PRESENTATION_FROM_COL_PROP_NAME = \"presentationFieldFrom\";\n","import { ColumnFilterManager as CoreColumnFilterManager } from \"@sankhyalabs/core\";\nexport class ColumnFilterManager {\n  static getColumnFilters(filters, fieldName) {\n    return CoreColumnFilterManager.getColumnFilters(filters, fieldName);\n  }\n  static getFilterFunction(dataUnit, filters) {\n    return CoreColumnFilterManager.getFilterFunction(dataUnit, filters);\n  }\n  static compileDistinct(fieldName, dataUnit) {\n    return CoreColumnFilterManager.compileDistinct(fieldName, dataUnit);\n  }\n  static compileDistinctFromArray(fieldName, dataUnit, records) {\n    return CoreColumnFilterManager.compileDistinctFromArray(fieldName, dataUnit, records);\n  }\n}\n","import { ObjectUtils, DataUnit, DataUnitInMemoryLoader, ApplicationContext, StringUtils, UserInterface, DataUnitStorage, DataType, ChangeOperation } from '@sankhyalabs/core';\nimport { D as DataFetcher, d as dist } from './DataFetcher-db08cad0.js';\nimport { DISTINCT_FILTER_NAME_PREFIX } from '@sankhyalabs/ezui/dist/collection/utils/constants';\nimport { DataUnitTransient } from '@sankhyalabs/core/dist/dataunit/metadata/UnitMetadata';\nimport { ColumnFilterManager } from '@sankhyalabs/ezui/dist/collection/components/ez-grid/utils';\nimport SortingUtils from '@sankhyalabs/core/dist/utils/SortingUtils';\nimport { R as ResourceIDUtils } from './ResourceIDUtils-a114189a.js';\n\nclass ArrayRepository {\n  constructor(equalsFunction) {\n    this._list = [];\n    this._listCopy = [];\n    this._listLastUpdate = 0;\n    this._listCopyLastUpdate = 0;\n    this._equalsFunction = equalsFunction;\n  }\n  async load(filterFunction, sortingFunction, offset, limit) {\n    let result = [].concat(this._list);\n    if (filterFunction != undefined) {\n      result = this._list.filter(item => filterFunction(item));\n    }\n    if (sortingFunction != undefined) {\n      result = result.sort(sortingFunction);\n    }\n    const count = result.length;\n    if (limit != undefined) {\n      const start = offset || 0;\n      const end = limit ? start + limit : result.length;\n      result = result.slice(start, end);\n    }\n    return Promise.resolve({ result, count });\n  }\n  async distict(itemProcessor) {\n    const processedItems = [];\n    let hasEmpty = false;\n    for (const item of this._list) {\n      const processedItem = itemProcessor(item);\n      if (processedItem == undefined) {\n        continue;\n      }\n      if (processedItem.value == undefined) {\n        hasEmpty = true;\n        continue;\n      }\n      processedItems.push(processedItem);\n    }\n    if (hasEmpty) {\n      processedItems.push({ key: \"\", value: null });\n    }\n    return Promise.resolve(new Map(processedItems.map(item => [item.key, item.value])));\n  }\n  async push(items) {\n    this.updateList([...this._list, ...items]);\n  }\n  async clear() {\n    this.updateList([]);\n  }\n  async delete(items) {\n    const list = this._list.filter(item => {\n      for (const removed of items) {\n        if (this._equalsFunction(item, removed)) {\n          return false;\n        }\n      }\n      return true;\n    });\n    this.updateList(list);\n  }\n  async update(items) {\n    const list = this._list.map(existingItem => {\n      const newItem = items.find(newItem => this._equalsFunction(existingItem, newItem));\n      return newItem == undefined ? existingItem : newItem;\n    });\n    this.updateList(list);\n  }\n  async insert(itemReference, items) {\n    const itemPosition = this._list.indexOf(itemReference);\n    if (itemPosition == -1) {\n      this.push(items);\n      return;\n    }\n    const list = this._list.slice(0, itemPosition).concat(items).concat(this._list.slice(itemPosition));\n    this.updateList(list);\n  }\n  isOperating() {\n    return true;\n  }\n  async isEmpty() {\n    return Promise.resolve(this._list.length === 0);\n  }\n  async count() {\n    return Promise.resolve(this._list.length);\n  }\n  getFromCache() {\n    if (this._listLastUpdate > this._listCopyLastUpdate) {\n      this._listCopyLastUpdate = this._listLastUpdate;\n      this._listCopy = ObjectUtils.copy(this._list);\n    }\n    return this._listCopy;\n  }\n  updateList(newList) {\n    this._list = newList;\n    this._listLastUpdate = Date.now();\n  }\n}\n\nclass PreloadManager {\n  static setLoadingStatus(dataUnit, loadingInProgress) {\n    this._loadingStatus.set(dataUnit.name, loadingInProgress);\n  }\n  static isCacheEnabled(_dataUnit) {\n    return true;\n  }\n  static cacheRecords(dataUnit, records, resetDatabase, loadingInProgress) {\n    PreloadManager.setLoadingStatus(dataUnit, loadingInProgress);\n    if (PreloadManager.isCacheEnabled(dataUnit)) {\n      this.getRepository(dataUnit).push(records);\n    }\n    else {\n      if (resetDatabase) {\n        this._repositories.delete(dataUnit.name);\n      }\n    }\n  }\n  static getSortingFunction(dataUnit, sorting) {\n    return SortingUtils.getSortingFunction(dataUnit, sorting);\n  }\n  static async getDistinct(dataUnit, fieldName, onlyLabel = false) {\n    if (!PreloadManager.isCacheEnabled(dataUnit)) {\n      return Promise.resolve(ColumnFilterManager.compileDistinct(fieldName, dataUnit));\n    }\n    let filterFunction;\n    const request = dataUnit.getLastLoadRequest();\n    if (request != undefined) {\n      const columnFilters = ColumnFilterManager.getColumnFilters(request.filters, fieldName);\n      filterFunction = ColumnFilterManager.getFilterFunction(dataUnit, Array.from(columnFilters.values()));\n    }\n    return new Promise((accept, reject) => {\n      PreloadManager.getRepository(dataUnit).distict(record => {\n        if (filterFunction != undefined && !filterFunction(record)) {\n          return undefined;\n        }\n        const fieldValue = record[fieldName];\n        if (fieldValue == undefined) {\n          return { key: null, value: null };\n        }\n        let value = fieldValue.value != undefined ? fieldValue.value : fieldValue;\n        if ((fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.label) && onlyLabel) {\n          return { key: fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.label, value: dataUnit.getFormattedValue(fieldName, value) };\n        }\n        return { key: dataUnit.getFormattedValue(fieldName, fieldValue), value };\n      })\n        .then(result => {\n        if (result == undefined) {\n          accept(undefined);\n          return;\n        }\n        accept(Array.from(result.entries()).map(([label, value]) => ({ label, value, check: true })));\n      })\n        .catch(reason => reject(reason));\n    });\n  }\n  static async loadData(dataUnit, request, loadFromServer) {\n    try {\n      if (PreloadManager.isCacheEnabled(dataUnit)) {\n        const useCache = [\n          \"EZ_GRID_LOADING_SOURCE\",\n          DataUnit.CHANGING_PAGE_LOADING_SOURCE,\n          DataUnit.ALL_RECORDS_SELECTION_SOURCE\n        ].includes(request.source);\n        if (useCache) {\n          const isCacheEmpty = await PreloadManager.getRepository(dataUnit).isEmpty();\n          if (!isCacheEmpty) {\n            return PreloadManager.loadFromCache(dataUnit, request);\n          }\n        }\n        //Como nÃ£o vamos aproveitar o cache, ele precisa ser limpo.\n        PreloadManager.getRepository(dataUnit).clear().catch(() => { });\n      }\n      return loadFromServer(dataUnit, request);\n    }\n    catch (error) {\n      console.error(error);\n      return Promise.reject(error);\n    }\n  }\n  static insertRecords(dataUnit, reference, records) {\n    if (PreloadManager.isCacheEnabled(dataUnit)) {\n      PreloadManager.getRepository(dataUnit).insert(reference, records);\n    }\n  }\n  static updateRecords(dataUnit, records) {\n    if (PreloadManager.isCacheEnabled(dataUnit)) {\n      PreloadManager.getRepository(dataUnit).update(records);\n    }\n  }\n  static removeRecords(dataUnit, records) {\n    if (PreloadManager.isCacheEnabled(dataUnit)) {\n      PreloadManager.getRepository(dataUnit).delete(records);\n    }\n  }\n  static async countRecords(dataUnit) {\n    if (PreloadManager.isCacheEnabled(dataUnit)) {\n      return PreloadManager.getRepository(dataUnit).count();\n    }\n    return Promise.resolve(0);\n  }\n  static getRepository(dataUnit) {\n    const name = dataUnit.name;\n    if (!PreloadManager._repositories.has(name)) {\n      PreloadManager._repositories.set(name, new ArrayRepository((recordA, recordB) => recordA.__record__id__ === recordB.__record__id__));\n    }\n    return PreloadManager._repositories.get(name);\n  }\n  static async loadFromCache(dataUnit, request) {\n    return new Promise((accept, reject) => {\n      const columnFilters = ColumnFilterManager.getColumnFilters(request.filters, \"\");\n      const { limit, offset, sort } = request;\n      PreloadManager.getRepository(dataUnit)\n        .load(ColumnFilterManager.getFilterFunction(dataUnit, Array.from(columnFilters.values())), PreloadManager.getSortingFunction(dataUnit, sort), offset, limit)\n        .then(loadResult => {\n        const stillLoading = PreloadManager._loadingStatus.get(dataUnit.name);\n        const { count, result: records } = loadResult;\n        const firstRecord = count == 0 ? 0 : offset + 1;\n        const lastRecord = offset + Math.min(records.length, limit);\n        const currentPage = offset / limit;\n        const paginationInfo = {\n          count, currentPage, firstRecord, lastRecord,\n          hasMore: stillLoading || (lastRecord < count),\n          total: stillLoading ? undefined : count\n        };\n        accept({ records, paginationInfo });\n      })\n        .catch(reason => reject(reason));\n    });\n  }\n  static getCachedRecords(dataUnit) {\n    return PreloadManager.getRepository(dataUnit).getFromCache();\n  }\n}\nPreloadManager._repositories = new Map();\nPreloadManager._loadingStatus = new Map();\n\nclass InMemoryLoader {\n  constructor(metadata, records, config) {\n    this._dataUnitInMemoryLoader = new DataUnitInMemoryLoader(metadata, records, config);\n  }\n  get dataUnit() {\n    return this._dataUnitInMemoryLoader.dataUnit;\n  }\n  get records() {\n    return this._dataUnitInMemoryLoader.records;\n  }\n  set records(records) {\n    this._dataUnitInMemoryLoader.records = records;\n  }\n  get metadata() {\n    return this._dataUnitInMemoryLoader.metadata;\n  }\n  set metadata(metadata) {\n    this._dataUnitInMemoryLoader.metadata = metadata;\n  }\n  removeLoader(_dataUnit, recordIds) {\n    return this._dataUnitInMemoryLoader.removeLoader(_dataUnit, recordIds);\n  }\n  static getConvertedValue(descriptor, strValue, dateFormat) {\n    return DataUnitInMemoryLoader.getConvertedValue(descriptor, strValue, dateFormat);\n  }\n}\nInMemoryLoader.IN_MEMORY_DATA_UNIT_NAME = DataUnitInMemoryLoader.IN_MEMORY_DATA_UNIT_NAME;\n\nfunction getRecordValue(record, fieldName) {\n  var _a, _b;\n  return ((_a = record[fieldName]) === null || _a === void 0 ? void 0 : _a.value) !== undefined ? (_b = record[fieldName]) === null || _b === void 0 ? void 0 : _b.value : record[fieldName];\n}\n\nclass DatasetStrategy {\n  canSlice() {\n    return false;\n  }\n  processSortingSide(request, dataUnit, serverSideFilters) {\n    var _a;\n    const localSorting = [];\n    const serverSorting = [];\n    if (request.sort != undefined) {\n      if (serverSideFilters.length === 0) {\n        return { localSorting: request.sort, serverSorting: [] };\n      }\n      for (const sort of request.sort) {\n        const descriptor = dataUnit.getField(sort.field);\n        const local = ((_a = descriptor === null || descriptor === void 0 ? void 0 : descriptor.properties) === null || _a === void 0 ? void 0 : _a.calculated) === \"true\" || (descriptor === null || descriptor === void 0 ? void 0 : descriptor.userInterface) === UserInterface.LONGTEXT;\n        if (local) {\n          localSorting.push(sort);\n        }\n        else {\n          serverSorting.push(sort);\n        }\n      }\n    }\n    return { localSorting, serverSorting };\n  }\n  async load(dataUnit, request, loadingInfo) {\n    var _a, _b;\n    if (dataUnit.metadata == undefined) {\n      return Promise.resolve({ records: [], loadingInfo });\n    }\n    try {\n      const serverSideFilters = (_b = (_a = request.filters) === null || _a === void 0 ? void 0 : _a.filter(filter => !filter.name.startsWith(\"FILTRO_COLUNA_\"))) !== null && _b !== void 0 ? _b : [];\n      const { localSorting, serverSorting } = this.processSortingSide(request, dataUnit, serverSideFilters);\n      const fields = this.getFieldsList(dataUnit);\n      const serviceName = \"DatasetSP.loadRecords\";\n      const requestBody = this.buildRequestBody(serviceName, fields, dataUnit, request, loadingInfo, serverSorting, serverSideFilters);\n      const params = loadingInfo.quiet ? { urlParams: { quietMode: \"true\" } } : undefined;\n      const { result: responseRecords, pagerID: pagerId, askRowsLimit } = await DataFetcher.get().callServiceBroker(serviceName, requestBody, params);\n      const records = this.processRecords(dataUnit, fields, responseRecords);\n      const loadingInProgress = pagerId != undefined;\n      const count = loadingInfo.count + records.length;\n      const isInsertingNewRecord = dataUnit.hasNewRecord();\n      const hasLocalSorting = localSorting.length > 0;\n      const needReload = !loadingInProgress && hasLocalSorting;\n      /**\n       * Caso precise recarregar dados, porÃ©m estÃ¡ no meio de uma inserÃ§Ã£o, os dados nÃ£o devem recarregados instantaneamente,\n       * Mas sim, sinalizar que o dataUnit estÃ¡ aguardando para der recarregado.\n       */\n      if (needReload && isInsertingNewRecord) {\n        dataUnit.setWaitingToReload(true);\n      }\n      return Promise.resolve({\n        records,\n        loadingInfo: Object.assign(Object.assign({}, loadingInfo), { pagerId,\n          loadingInProgress, total: loadingInProgress ? undefined : count, count, needReload: needReload && !isInsertingNewRecord, askRowsLimit,\n          hasLocalSorting })\n      });\n    }\n    catch (error) {\n      console.error(error);\n      return Promise.reject(error);\n    }\n  }\n  async loadRowMetadata(snkDataUnit, fieldName, metadataName, updatedFields = {}) {\n    try {\n      const serviceName = \"DatasetSP.loadRowMetadata\";\n      const parsedRequestBody = await this.buildRequestBodyLoadRowMetadata({ snkDataUnit, fieldName, metadataName, serviceName, updatedFields });\n      const response = await DataFetcher.get().callServiceBroker(serviceName, parsedRequestBody);\n      return response;\n    }\n    catch (error) {\n      console.error(error);\n      return Promise.reject(error);\n    }\n  }\n  async buildRequestBodyLoadRowMetadata({ snkDataUnit, serviceName, fieldName, metadataName, updatedFields, }) {\n    const dataUnit = snkDataUnit.dataUnit;\n    const entityName = DataUnitFetcher.parseDataUnitName(dataUnit.name).entityName;\n    const recordIdInfo = await snkDataUnit.getSelectedRecordsIDsInfo();\n    const pk = recordIdInfo.reduce((accumulator, currentValue) => {\n      accumulator[currentValue.name] = currentValue.value;\n      return accumulator;\n    }, {});\n    const record = dataUnit.getSelectedRecord();\n    const fields = dataUnit.metadata.fields.filter(({ standAlone, name }) => !standAlone && !name.includes(\".\")).map(({ name }) => name);\n    const values = fields.reduce((accumulator, currentValue, currentIndex) => {\n      const recordValue = getRecordValue(record, currentValue);\n      const updatedFieldValue = getRecordValue(updatedFields, currentValue);\n      accumulator[currentIndex] = updatedFieldValue !== undefined ? updatedFieldValue : recordValue;\n      return accumulator;\n    }, {});\n    const requestBody = {\n      serviceName,\n      requestBody: {\n        dataSetID: dataUnit.dataUnitId,\n        entityName,\n        standAlone: false,\n        metadataName,\n        fieldName,\n        fields,\n        record: {\n          pk,\n          oldPk: pk,\n          values,\n        },\n      }\n    };\n    return JSON.stringify(requestBody);\n  }\n  getFieldsList(dataUnit) {\n    let fields = [\"__record__id__\", \"__record__label__\"];\n    dataUnit.metadata.fields.forEach((descriptor) => {\n      if (descriptor.standAlone)\n        return;\n      fields = fields.concat(this.getFieldNames(descriptor));\n    });\n    return fields;\n  }\n  getStandAloneFieldsList(dataUnit) {\n    let fields = {};\n    dataUnit.metadata.fields.forEach((currentField) => {\n      if (!currentField.standAlone)\n        return;\n      fields = Object.assign(Object.assign({}, fields), { [currentField.name]: { fieldType: currentField.dataType, userType: currentField.userInterface } });\n    });\n    return fields;\n  }\n  getFieldNames(descriptor) {\n    const descriptionField = this.getSearchDescriptionField(descriptor);\n    if (descriptionField == undefined) {\n      return descriptor.name;\n    }\n    return [descriptor.name, descriptionField];\n  }\n  buildRequestBody(serviceName, fields, dataUnit, request, loadingInfo, sorting, serverSideFilters) {\n    const dataSetID = dataUnit.dataUnitId;\n    const dataUnitName = dataUnit.name;\n    const entityName = DataUnitFetcher.parseDataUnitName(dataUnitName).entityName;\n    const useParallelLoader = !!(request.limit || request.offset);\n    const requestBody = {\n      serviceName,\n      requestBody: {\n        dataSetID,\n        fields,\n        entityName,\n        pageNumber: loadingInfo.pageNumber,\n        totalRecordsCount: loadingInfo.count,\n        pagerID: loadingInfo.pagerId,\n        standAlone: false,\n        standAloneFieldsMD: Object.assign({ __record__id__: { \"fieldType\": \"S\", \"userType\": \"P\" }, __record__label__: { \"fieldType\": \"S\", \"userType\": \"P\" } }, this.getStandAloneFieldsList(dataUnit)),\n        tryJoinedFields: true,\n        parallelLoader: useParallelLoader,\n        crudListener: `br.com.sankhya.bff.${this.getModuleName()}.BFFDataUnitDatasetAdapter`,\n        txProperties: this.getTxProperties(dataUnit, request, sorting, serverSideFilters),\n        useDefaultRowsLimit: false\n      }\n    };\n    return JSON.stringify(requestBody);\n  }\n  getModuleName() {\n    const app = ApplicationContext.getContextValue(\"__SNK__APPLICATION__\");\n    const moduleName = app.getModuleName();\n    return moduleName.replace(\"-bff\", \"\");\n  }\n  getTxProperties(dataUnit, request, sorting, serverSideFilters) {\n    const txProperties = {\n      \"__DATA_UNIT_ADAPTER__[dataUnitName]\": dataUnit.name\n    };\n    if (serverSideFilters.length !== 0) {\n      txProperties[\"__DATA_UNIT_ADAPTER__[criteria]\"] = JSON.stringify(serverSideFilters);\n    }\n    if (sorting != undefined && sorting.length !== 0) {\n      txProperties[\"__DATA_UNIT_ADAPTER__[sorting]\"] = JSON.stringify(sorting);\n    }\n    if (request.parentRecordId != undefined) {\n      txProperties[\"__DATA_UNIT_ADAPTER__[parentRecordId]\"] = request.parentRecordId;\n    }\n    const loaderProps = dataUnit.getGlobalLoaderProps();\n    if (loaderProps == undefined || loaderProps.size === 0) {\n      return txProperties;\n    }\n    Array.from(loaderProps.entries()).forEach(([name, value]) => {\n      txProperties[name] = value;\n    });\n    return txProperties;\n  }\n  processRecords(dataUnit, fields, responseRecords) {\n    return responseRecords.map((dataFrame) => {\n      const lastElement = dataFrame[dataFrame.length - 1];\n      const duRecord = {\n        __record__id__: dataFrame[0],\n        __record__label__: dataFrame[1],\n        __record__metadata__: lastElement['_rmd'],\n      };\n      dataUnit.metadata.fields.forEach(fieldDescriptor => {\n        duRecord[fieldDescriptor.name] = this.buildFieldValue(fieldDescriptor, fields, dataFrame);\n      });\n      return duRecord;\n    });\n  }\n  buildFieldValue(descriptor, allFields, dataFrame) {\n    const fieldIndex = allFields.indexOf(descriptor.name);\n    if (fieldIndex < 0) {\n      return null;\n    }\n    const strValue = dataFrame[fieldIndex];\n    if (StringUtils.isEmpty(strValue)) {\n      return null;\n    }\n    const descriptionField = this.getSearchDescriptionField(descriptor);\n    if (descriptionField != undefined) {\n      const descriptionFieldIndex = allFields.indexOf(descriptionField);\n      if (descriptionFieldIndex >= 0) {\n        return { value: strValue, label: dataFrame[descriptionFieldIndex] };\n      }\n    }\n    if (descriptor.userInterface === UserInterface.SEARCH) {\n      //Se nÃ£o tem um campo de descriÃ§Ã£o (cÃ³digo acima)\n      //Mas Ã© um search, tentamos parsear um numero...\n      return isNaN(Number(strValue)) ? strValue : Number(strValue);\n    }\n    return InMemoryLoader.getConvertedValue(descriptor, strValue);\n  }\n  getSearchDescriptionField(descriptor) {\n    if (![UserInterface.SEARCH, UserInterface.SEARCHPLUS].includes(descriptor.userInterface)) {\n      return undefined;\n    }\n    if (!descriptor.properties) {\n      return undefined;\n    }\n    const { ENTITYNAME, mergedFrom, DESCRIPTIONFIELD } = descriptor.properties;\n    if (!StringUtils.isEmpty(DESCRIPTIONFIELD)) {\n      return mergedFrom != undefined ? `${mergedFrom}.${ENTITYNAME}.${DESCRIPTIONFIELD}` : `${ENTITYNAME}.${DESCRIPTIONFIELD}`;\n    }\n    return undefined;\n  }\n}\n\nasync function showAskCancelPaginationPopup() {\n  return new Promise((resolve) => {\n    const { checkboxContainer, checkbox } = buildCheckboxContainer();\n    const popup = builPopup(resolve, checkbox);\n    const contentContainer = buildContentContainer();\n    contentContainer.appendChild(buildMessage());\n    contentContainer.appendChild(checkboxContainer);\n    const actionsContainer = buildActionsContainer();\n    actionsContainer.appendChild(buildContinuePaginationBtn(popup, checkbox, resolve));\n    actionsContainer.appendChild(buildCancelPaginationBtn(popup, resolve));\n    contentContainer.appendChild(actionsContainer);\n    popup.appendChild(contentContainer);\n    document.body.appendChild(popup);\n  });\n}\nfunction buildCheckboxContainer() {\n  const checkboxContainer = document.createElement('div');\n  checkboxContainer.style.marginBottom = '14px';\n  checkboxContainer.style.display = 'flex';\n  checkboxContainer.style.alignItems = 'center';\n  const { checkbox, checkboxLabel } = buildCheckbox();\n  checkboxContainer.appendChild(checkbox);\n  checkboxContainer.appendChild(checkboxLabel);\n  return { checkboxContainer, checkbox };\n}\nfunction buildCheckbox() {\n  const checkbox = document.createElement('input');\n  checkbox.type = 'checkbox';\n  checkbox.id = 'loadAll';\n  const checkboxLabel = document.createElement('label');\n  checkboxLabel.htmlFor = 'loadAll';\n  checkboxLabel.textContent = 'Carregar tudo';\n  checkboxLabel.style.marginLeft = '5px';\n  return { checkbox, checkboxLabel };\n}\nfunction buildActionsContainer() {\n  const actionsContainer = document.createElement('div');\n  actionsContainer.style.display = 'flex';\n  actionsContainer.style.flexDirection = 'row';\n  actionsContainer.style.justifyContent = 'end';\n  actionsContainer.style.gap = '5px';\n  return actionsContainer;\n}\nfunction buildContentContainer() {\n  const contentContainer = document.createElement('div');\n  contentContainer.style.display = 'flex';\n  contentContainer.style.flexDirection = 'column';\n  contentContainer.style.fontFamily = 'var(--font-pattern, Roboto)';\n  contentContainer.style.fontSize = 'var(--text--medium)';\n  return contentContainer;\n}\nfunction buildMessage() {\n  const message = document.createElement('div');\n  const line1 = document.createElement('p');\n  const line2 = document.createElement('p');\n  const line3 = document.createElement('p');\n  line3.style.fontWeight = 'var(--text-weight--large, 600)';\n  line1.textContent = 'Uma quantidade de registros muito grande estÃ¡ sendo carregada.';\n  line2.textContent = 'Recomendamos que a paginaÃ§Ã£o seja cancelada e que seja criado um filtro para os registros.';\n  line3.textContent = 'Deseja cancelar o carregamento?';\n  message.appendChild(line1);\n  message.appendChild(line2);\n  message.appendChild(line3);\n  return message;\n}\nfunction buildCancelPaginationBtn(popup, resolve) {\n  const cancelPaginationBtn = document.createElement('ez-button');\n  cancelPaginationBtn.label = 'Cancelar paginaÃ§Ã£o';\n  cancelPaginationBtn.size = 'medium';\n  cancelPaginationBtn.classList.add('ez-button--primary');\n  cancelPaginationBtn.onclick = () => {\n    document.body.removeChild(popup);\n    resolve(CancelPaginationResponse.CANCEL);\n  };\n  return cancelPaginationBtn;\n}\nfunction buildContinuePaginationBtn(popup, checkBox, resolve) {\n  const continuePaginationBtn = document.createElement('ez-button');\n  continuePaginationBtn.label = 'Continuar';\n  continuePaginationBtn.size = 'medium';\n  continuePaginationBtn.onclick = () => {\n    document.body.removeChild(popup);\n    resolve(checkBox.checked ? CancelPaginationResponse.LOAD_ALL : CancelPaginationResponse.CONTINUE);\n  };\n  return continuePaginationBtn;\n}\nfunction builPopup(resolve, checkBox) {\n  const popup = document.createElement('ez-popup');\n  popup.opened = true;\n  popup.size = 'x-small';\n  popup.ezTitle = 'Aviso';\n  popup.heightMode = \"auto\";\n  popup.addEventListener('ezClosePopup', () => {\n    document.body.removeChild(popup);\n    resolve(checkBox.checked ? CancelPaginationResponse.LOAD_ALL : CancelPaginationResponse.CONTINUE);\n  }, { once: true });\n  popup.addEventListener('ezPopupAction', () => {\n    document.body.removeChild(popup);\n    resolve(CancelPaginationResponse.CANCEL);\n  }, { once: true });\n  return popup;\n}\nvar CancelPaginationResponse;\n(function (CancelPaginationResponse) {\n  CancelPaginationResponse[\"CANCEL\"] = \"CANCEL\";\n  CancelPaginationResponse[\"CONTINUE\"] = \"CONTINUE\";\n  CancelPaginationResponse[\"LOAD_ALL\"] = \"LOAD_ALL\";\n})(CancelPaginationResponse || (CancelPaginationResponse = {}));\n\nclass DataUnitDataLoader {\n  constructor() { }\n  static async debounce(dataUnit, callBack) {\n    const duName = dataUnit.name;\n    if (DataUnitDataLoader._debouncingTimeouts[duName]) {\n      clearTimeout(DataUnitDataLoader._debouncingTimeouts[duName]);\n      delete DataUnitDataLoader._debouncingTimeouts[duName];\n    }\n    DataUnitDataLoader._debouncingTimeouts[duName] = setTimeout(() => {\n      delete DataUnitDataLoader._debouncingTimeouts[duName];\n      callBack();\n    }, 100);\n  }\n  static async loadData(dataUnit, request) {\n    return new Promise((resolve, reject) => {\n      DataUnitDataLoader.debounce(dataUnit, () => {\n        PreloadManager.loadData(dataUnit, request, this.loadFromServer)\n          .then(resp => resolve(resp))\n          .catch(reason => reject(reason));\n      });\n    });\n  }\n  static getCachedRecords(dataUnit) {\n    return PreloadManager.getCachedRecords(dataUnit);\n  }\n  static async loadFromServer(dataUnit, request, loadingInfo) {\n    try {\n      //Registramos a request com as informaÃ§Ãµes de carga para determinarmos a Ãºltima.\n      //Caso o usuÃ¡rio inicie outro refresh antes de terminar, devemos ignorar o resultado.\n      loadingInfo = DataUnitDataLoader.registryLoading(dataUnit, loadingInfo);\n      const loadResult = await DataUnitDataLoader.callLoader(dataUnit, request, loadingInfo);\n      if (loadResult == undefined) {\n        //Essa request foi originada de refresh antigo. SerÃ¡ ignorada;\n        return;\n      }\n      const loadedRecords = loadResult.records;\n      const paginationInfo = DataUnitDataLoader.buildPaginationInfo(loadedRecords.length, request, loadResult.loadingInfo);\n      const records = paginationInfo == undefined ? loadedRecords : loadedRecords.slice(0, paginationInfo.lastRecord);\n      return Promise.resolve({ records, paginationInfo });\n    }\n    catch (error) {\n      console.error(error);\n      return Promise.reject(error);\n    }\n  }\n  static async callLoader(dataUnit, request, requestLoadingInfo, dataLoader) {\n    if (dataLoader == undefined) {\n      dataLoader = new DatasetStrategy();\n    }\n    const result = await dataLoader.load(dataUnit, request, requestLoadingInfo);\n    const responseLoadingInfo = result.loadingInfo;\n    if (DataUnitDataLoader.isOldRequest(dataUnit, responseLoadingInfo))\n      return Promise.resolve(undefined);\n    this.handleCache(dataLoader, responseLoadingInfo, dataUnit, result.records);\n    if (dataUnit.cancelPagination)\n      return this.handlePaginationCanceled(dataUnit, result);\n    //NÃ£o existem mais pÃ¡ginas a serem carregadas\n    if (this.canFinishPagination(dataUnit, responseLoadingInfo))\n      return Promise.resolve(result);\n    const newRequest = Object.assign(Object.assign({}, request), { offset: responseLoadingInfo.count });\n    let newLoadingInfo = this.buildNewLoadingInfo(responseLoadingInfo);\n    if (this.canProceedPagination(responseLoadingInfo))\n      return this.recallLoader(dataUnit, newRequest, newLoadingInfo, dataLoader, result);\n    const confirm = await showAskCancelPaginationPopup();\n    if (confirm === CancelPaginationResponse.CANCEL)\n      return this.handlePaginationCanceled(dataUnit, result);\n    if (confirm === CancelPaginationResponse.LOAD_ALL) {\n      newLoadingInfo = Object.assign(Object.assign({}, newLoadingInfo), { loadAllRecords: true });\n    }\n    newLoadingInfo = Object.assign(Object.assign({}, newLoadingInfo), { lastRowLimitAsked: newLoadingInfo.count });\n    return this.recallLoader(dataUnit, newRequest, newLoadingInfo, dataLoader, result);\n  }\n  static buildNewLoadingInfo(responseLoadingInfo) {\n    let newLoadingInfo = Object.assign(Object.assign({}, responseLoadingInfo), { pageNumber: (responseLoadingInfo.pageNumber || 0) + 1, quiet: true });\n    return newLoadingInfo;\n  }\n  static handleCache(dataLoader, responseLoadingInfo, dataUnit, records) {\n    const recreateCache = !dataLoader.canSlice() || responseLoadingInfo.count === 0;\n    PreloadManager.cacheRecords(dataUnit, records, recreateCache, responseLoadingInfo.loadingInProgress);\n  }\n  static recallLoader(dataUnit, newRequest, newLoadingInfo, dataLoader, result) {\n    this.callLoader(dataUnit, newRequest, newLoadingInfo, dataLoader)\n      .then(result => DataUnitDataLoader.afterLoadingPage(dataUnit, result.loadingInfo))\n      .catch(reason => console.error(reason));\n    return Promise.resolve(result);\n  }\n  static canFinishPagination(dataUnit, responseLoadingInfo) {\n    return !PreloadManager.isCacheEnabled(dataUnit) || !responseLoadingInfo.loadingInProgress;\n  }\n  static canProceedPagination(info) {\n    const { count, askRowsLimit, loadAllRecords, lastRowLimitAsked } = info;\n    if (loadAllRecords)\n      return true;\n    if (!count || !askRowsLimit)\n      return true;\n    const askRowLimitNumber = Number(askRowsLimit);\n    if (count < askRowLimitNumber)\n      return true;\n    const nextLimitToAsk = askRowLimitNumber + (lastRowLimitAsked ? lastRowLimitAsked : 0);\n    return count < nextLimitToAsk;\n  }\n  static handlePaginationCanceled(dataUnit, result) {\n    dataUnit.cancelPagination = false;\n    let loadingInfo = result.loadingInfo;\n    loadingInfo = Object.assign(Object.assign({}, loadingInfo), { total: loadingInfo.count, loadingInProgress: false, pagerId: undefined, needReload: loadingInfo.hasLocalSorting });\n    const loadDataResult = { records: result.records, loadingInfo };\n    return Promise.resolve(loadDataResult);\n  }\n  static afterLoadingPage(dataUnit, loadingInfo) {\n    PreloadManager.setLoadingStatus(dataUnit, loadingInfo.loadingInProgress);\n    const dataUnitPagination = dataUnit.getPaginationInfo();\n    if (dataUnitPagination == undefined) {\n      return;\n    }\n    const count = loadingInfo.count;\n    if (loadingInfo.loadingInProgress) {\n      dataUnit.updatePagination(Object.assign(Object.assign({}, dataUnitPagination), { count, loadingInProgress: true }));\n      return;\n    }\n    if (loadingInfo.needReload) {\n      //Ir para a primeira pÃ¡gina, faz com que o loadData seja chamado novamente\n      dataUnit.gotoPage(0);\n      return;\n    }\n    dataUnit.updatePagination(Object.assign(Object.assign({}, dataUnitPagination), { total: count, count, loadingInProgress: false }));\n  }\n  static registryLoading(dataUnit, loadingInfo) {\n    if (loadingInfo == undefined) {\n      loadingInfo = { requestTime: new Date().getTime(), count: 0 };\n    }\n    DataUnitDataLoader._requestTimeByDataUnit.set(dataUnit.name, loadingInfo.requestTime);\n    return loadingInfo;\n  }\n  static isOldRequest(dataUnit, loadingInfo) {\n    return DataUnitDataLoader._requestTimeByDataUnit.get(dataUnit.name) > loadingInfo.requestTime;\n  }\n  static buildPaginationInfo(pageSize, request, loadingInfo) {\n    let { limit, offset } = request;\n    if (!limit) {\n      return undefined;\n    }\n    if (loadingInfo.pageNumber === 1) {\n      // Quando o loader nÃ£o Ã© capaz de fatiar os registros\n      // ele pode decidir por uma carga completa, o que faz o\n      // controle de paginaÃ§Ã£o voltar pra primeira pÃ¡gina.\n      offset = 0;\n    }\n    const { total, count, loadingInProgress, askRowsLimit } = loadingInfo;\n    const firstRecord = (count === 0 || pageSize === 0) ? 0 : offset + 1;\n    const lastRecord = offset + Math.min(pageSize, limit);\n    return {\n      total,\n      count,\n      lastRecord,\n      firstRecord,\n      currentPage: offset / limit,\n      hasMore: lastRecord < count || loadingInProgress,\n      askRowsLimit\n    };\n  }\n}\nDataUnitDataLoader._requestTimeByDataUnit = new Map();\nDataUnitDataLoader._debouncingTimeouts = {};\n\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n    t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n        t[p[i]] = s[p[i]];\n    }\n  return t;\n};\nconst DATA_UNIT_NAME_PARSER = /dd:\\/\\/([^/]+)\\/([^/?]+)/;\nclass DataUnitFetcher {\n  constructor() {\n    this.templateByQuery = new Map();\n    this.buldTemplates();\n  }\n  buldTemplates() {\n    this.templateByQuery.set(\"fetchDataUnit\", dist.gql `query($name: String!) {\n              $queryAlias$: fetchDataUnit(name: $name){\n                name\n                fields{\n                  name\n                  defaultValue\n                  label\n                  visible\n                  standAlone\n                  readOnly\n                  required\n                  dataType\n                  userInterface\n                  calculated\n                  group\n                  order\n                  properties{\n                    name\n                    value\n                  }\n                  dependencies{\n                    masterFields\n                    type\n                    expression\n                  }\n                }\n                children{\n                  name\n                  label\n                  links{\n                    source\n                    target\n                  }\n                }\n              }\n            }`);\n    this.templateByQuery.set(\"saveData\", dist.gql `mutation($changes: [InputBatchChange!]!) {\n            $queryAlias$: batchOperationDataUnit(changes: $changes){\n              oldId\n              id\n              label\n              ownerDataUnitName\n              fields {\n                name\n                value\n              }\n            }\n          }`);\n    this.templateByQuery.set(\"fetchDataRecord\", dist.gql `query($dataunit: String! $recordID: [String!]) {\n            $queryAlias$: fetchDataUnit(name: $dataunit){\n              record(id: $recordID){\n                id\n                label\n                fields {\n                  name\n                  value\n                }\n              }\n            }\n          }`);\n    this.templateByQuery.set(\"fetchDistinctColumn\", dist.gql `query($dataUnit: String!, $fieldName: String!, $argument: String, $filters: [InputFilter], $parentRecordId: String) {\n          $queryAlias$: selectDistinct(dataUnit: $dataUnit, fieldName: $fieldName, argument: $argument, filters: $filters, parentRecordId: $parentRecordId)\n      }`);\n  }\n  static parseDataUnitName(name) {\n    if (name == undefined) {\n      return undefined;\n    }\n    const parts = DATA_UNIT_NAME_PARSER.exec(name);\n    if (!parts) {\n      return undefined;\n    }\n    return { entityName: parts[1], resourceID: parts[2] };\n  }\n  getDataUnit(entityName, resourceID, parentDataUnit, configName) {\n    if (PreloadManager.applicationResourceID == undefined) {\n      //Por falta de um lugar melhor pra iniciar essa variÃ¡vel, fazemos isso aqui.\n      ResourceIDUtils.getResourceID().then(resourceID => PreloadManager.applicationResourceID = resourceID);\n    }\n    const duName = `dd://${entityName}/${resourceID}${configName ? \"/\" + configName : \"\"}`;\n    const dataUnit = parentDataUnit != undefined ? parentDataUnit.getChildDataunit(duName) : new DataUnit(duName);\n    dataUnit.metadataLoader = (dataUnit) => this.loadMetadata(dataUnit);\n    dataUnit.dataLoader = (dataUnit, request) => DataUnitDataLoader.loadData(dataUnit, request);\n    dataUnit.saveLoader = (_dataUnit, changes) => this.saveData(dataUnit, changes);\n    dataUnit.removeLoader = (dataUnit, recordIds) => this.removeRecords(dataUnit, recordIds);\n    dataUnit.recordLoader = (dataUnit, recordIds) => this.loadRecord(dataUnit, recordIds);\n    dataUnit.allRecordsLoader = (dataUnit) => DataUnitDataLoader.getCachedRecords(dataUnit);\n    return dataUnit;\n  }\n  loadMetadata(dataUnit) {\n    return new Promise((resolve, reject) => {\n      DataFetcher.get()\n        .callGraphQL({\n        values: { name: dataUnit.name },\n        query: this.templateByQuery.get(\"fetchDataUnit\"),\n      })\n        .then((resp) => {\n        var _a;\n        const metadata = {\n          name: resp.name,\n          label: resp.name,\n          children: [...resp.children],\n          fields: []\n        };\n        (_a = resp.fields) === null || _a === void 0 ? void 0 : _a.forEach((source) => {\n          let properties = undefined;\n          if (Array.isArray(source.properties)) {\n            properties = {};\n            if (source.calculated) {\n              properties.gridHeaderTooltip = \"Campos calculados nÃ£o podem ser ordenados\";\n            }\n            source.properties.forEach((prop) => (properties[prop.name] = prop.value));\n          }\n          metadata.fields.push(Object.assign(Object.assign({}, source), { properties }));\n        });\n        metadata.fields.sort((a, b) => a.order - b.order);\n        resolve(metadata);\n      })\n        .catch((error) => {\n        reject(error);\n      });\n    });\n  }\n  loadSelectDistinct(dataUnit, fieldName, argument) {\n    const { parentRecordId, filters } = dataUnit.getLastLoadRequest() || {};\n    const filteredFilters = filters.filter(f => f.name !== `${DISTINCT_FILTER_NAME_PREFIX}${fieldName}`);\n    const values = {\n      dataUnit: dataUnit.name,\n      argument,\n      fieldName,\n      parentRecordId,\n      filters: filteredFilters\n    };\n    return new Promise((resolve, reject) => {\n      DataFetcher.get()\n        .callGraphQL({\n        values,\n        query: this.templateByQuery.get(\"fetchDistinctColumn\"),\n      })\n        .then((result) => {\n        resolve(result);\n      })\n        .catch((error) => {\n        reject(error);\n      });\n    });\n  }\n  addTransientProperties(dataUnit, updatingFields) {\n    const loaderProps = dataUnit.getGlobalLoaderProps();\n    if (loaderProps == undefined || loaderProps.size === 0) {\n      return updatingFields;\n    }\n    if (updatingFields == undefined) {\n      updatingFields = {};\n    }\n    Array.from(loaderProps.entries()).forEach(([name, value]) => {\n      updatingFields[`transient.${name}`] = value;\n    });\n    return updatingFields;\n  }\n  getUpdatingFields(dataUnit, originalUpdatingFields) {\n    if (originalUpdatingFields == undefined) {\n      return;\n    }\n    const updatingFields = Object.assign({}, originalUpdatingFields);\n    Object.keys(updatingFields).forEach(key => {\n      const descriptor = dataUnit.getField(key);\n      if (descriptor != undefined && descriptor.standAlone) {\n        delete updatingFields[key];\n      }\n    });\n    return this.addTransientProperties(dataUnit, updatingFields);\n  }\n  saveData(dataUnit, duChanges) {\n    const updatedRecordsIds = [];\n    const addedRecordsIds = [];\n    const changes = duChanges.map((change) => {\n      const { dataUnit: changeDU, record, operation } = change;\n      const dataUnitInstance = DataUnitStorage.get(changeDU);\n      const updatingFields = this.getUpdatingFields(dataUnitInstance, change.updatingFields);\n      let parsedUpdatingFields;\n      if (updatingFields != undefined) {\n        parsedUpdatingFields = Object.entries(updatingFields).map(([fieldName, value]) => {\n          const descriptor = dataUnitInstance.getField(fieldName);\n          const dataType = descriptor ? descriptor.dataType : DataType.TEXT;\n          return { fieldName, dataType, value: dataUnitInstance.valueToString(fieldName, value) };\n        });\n      }\n      if (changeDU === dataUnit.name) {\n        if (operation === ChangeOperation.INSERT || operation === ChangeOperation.COPY) {\n          addedRecordsIds.push(record.__record__id__);\n        }\n        else {\n          updatedRecordsIds.push(record.__record__id__);\n        }\n      }\n      const reqChange = { dataUnit: changeDU, fields: parsedUpdatingFields, operation, recordId: record.__record__id__ };\n      if (change.sourceId) {\n        reqChange.sourceId = change.sourceId;\n      }\n      if (record.__parent__record__id__) {\n        reqChange.parentRecordId = record.__parent__record__id__;\n      }\n      return reqChange;\n    });\n    return new Promise((resolve, reject) => {\n      const changesFormatted = changes.map((_a) => {\n        var rest = __rest(_a, []);\n        return rest;\n      });\n      DataFetcher.get()\n        .callGraphQL({\n        values: { changes: changesFormatted },\n        query: this.templateByQuery.get(\"saveData\"),\n      })\n        .then((resp) => {\n        const dataUnitRecords = [];\n        resp === null || resp === void 0 ? void 0 : resp.forEach((responseRecord) => {\n          const duRecord = {\n            __record__id__: responseRecord.id,\n            __record__label__: responseRecord.label,\n            __owner__dataunit__name__: responseRecord.ownerDataUnitName,\n          };\n          const dataUnitInstance = DataUnitStorage.get(duRecord.__owner__dataunit__name__) || dataUnit;\n          if (responseRecord.oldId) {\n            duRecord.__old__id__ = responseRecord.oldId;\n          }\n          responseRecord.fields.forEach(({ name, value }) => {\n            var _a;\n            const valueFromString = (_a = dataUnitInstance === null || dataUnitInstance === void 0 ? void 0 : dataUnitInstance.valueFromString) === null || _a === void 0 ? void 0 : _a.call(dataUnitInstance, name, value);\n            duRecord[name] = (valueFromString !== undefined) ? valueFromString : value;\n          });\n          dataUnitRecords.push(duRecord);\n        });\n        this.updateCache(dataUnit, dataUnitRecords, updatedRecordsIds, addedRecordsIds);\n        resolve(dataUnitRecords);\n      })\n        .catch((error) => {\n        reject(error);\n      });\n    });\n  }\n  updateCache(dataUnit, savedRecords, toUpdate, toInsert) {\n    const recordsById = new Map(savedRecords.map(record => [record.__old__id__ || record.__record__id__, record]));\n    const addedRecords = toInsert.map(recordId => {\n      const copy = Object.assign({}, recordsById.get(recordId));\n      delete copy.__old__id__;\n      return copy;\n    });\n    if (addedRecords.length > 0) {\n      const firstRecord = dataUnit.records[0];\n      PreloadManager.insertRecords(dataUnit, firstRecord, addedRecords);\n    }\n    const updatedRecords = toUpdate.map(recordId => (Object.assign({}, recordsById.get(recordId))));\n    PreloadManager.updateRecords(dataUnit, updatedRecords);\n  }\n  getTransientInfo(dataUnit, recordID) {\n    const { records } = dataUnit.getSelectionInfo();\n    return Object.entries(records.filter(record => record.__record__id__ == recordID)[0]).filter(([key]) => key.startsWith(DataUnitTransient.DATA_UNIT_TRANSIENT_PREFIX_NAME)).map(([name, value]) => ({ fieldName: name, value, dataType: DataType.TEXT }));\n  }\n  removeRecords(dataUnit, recordIds) {\n    const changes = recordIds.map((recordId) => {\n      return { dataUnit: dataUnit.name, operation: ChangeOperation.DELETE, recordId, fields: this.getTransientInfo(dataUnit, recordId) };\n    });\n    return new Promise((resolve, reject) => {\n      DataFetcher.get()\n        .callGraphQL({\n        values: { changes: changes },\n        query: this.templateByQuery.get(\"saveData\"),\n      })\n        .then((_resp) => {\n        PreloadManager.removeRecords(dataUnit, dataUnit.records.filter(record => recordIds.includes(record.__record__id__)));\n        resolve(recordIds);\n      })\n        .catch((error) => {\n        reject(error);\n      });\n    });\n  }\n  loadRecord(dataUnit, recordIds) {\n    return new Promise((resolve, reject) => {\n      DataFetcher.get()\n        .callGraphQL({\n        values: { recordID: recordIds, dataunit: dataUnit.name },\n        query: this.templateByQuery.get(\"fetchDataRecord\"),\n      })\n        .then((response) => {\n        const dataUnitRecords = [];\n        response.record.forEach(responseRecord => {\n          const duRecord = { __record__id__: responseRecord.id, __record__label__: responseRecord.label };\n          responseRecord.fields.forEach(({ name, value }) => {\n            duRecord[name] = dataUnit.valueFromString(name, value);\n          });\n          dataUnitRecords.push(duRecord);\n        });\n        //TODO: Chamar o worker para persistir a nova versÃ£o do registro\n        resolve(dataUnitRecords);\n      })\n        .catch((error) => {\n        reject(error);\n      });\n    });\n  }\n}\n\nexport { DataUnitFetcher as D, InMemoryLoader as I, PreloadManager as P, DatasetStrategy as a, getRecordValue as g };\n"],"names":["DISTINCT_FILTER_NAME_PREFIX","ColumnFilterManager","filters","fieldName","CoreColumnFilterManager","dataUnit","records","ArrayRepository","equalsFunction","filterFunction","sortingFunction","offset","limit","result","item","count","start","end","itemProcessor","processedItems","hasEmpty","processedItem","items","list","removed","existingItem","newItem","itemReference","itemPosition","ObjectUtils","newList","PreloadManager","loadingInProgress","_dataUnit","resetDatabase","sorting","SortingUtils","onlyLabel","request","columnFilters","accept","reject","record","fieldValue","value","label","reason","loadFromServer","DataUnit","error","reference","name","recordA","recordB","sort","loadResult","stillLoading","firstRecord","lastRecord","currentPage","paginationInfo","InMemoryLoader","metadata","config","DataUnitInMemoryLoader","recordIds","descriptor","strValue","dateFormat","getRecordValue","_a","_b","DatasetStrategy","serverSideFilters","localSorting","serverSorting","UserInterface","loadingInfo","filter","fields","serviceName","requestBody","params","responseRecords","pagerId","askRowsLimit","DataFetcher","isInsertingNewRecord","hasLocalSorting","needReload","snkDataUnit","metadataName","updatedFields","parsedRequestBody","entityName","DataUnitFetcher","pk","accumulator","currentValue","standAlone","values","currentIndex","recordValue","updatedFieldValue","currentField","descriptionField","dataSetID","dataUnitName","useParallelLoader","ApplicationContext","txProperties","loaderProps","dataFrame","lastElement","duRecord","fieldDescriptor","allFields","fieldIndex","StringUtils","descriptionFieldIndex","ENTITYNAME","mergedFrom","DESCRIPTIONFIELD","showAskCancelPaginationPopup","resolve","checkboxContainer","checkbox","buildCheckboxContainer","popup","builPopup","contentContainer","buildContentContainer","buildMessage","actionsContainer","buildActionsContainer","buildContinuePaginationBtn","buildCancelPaginationBtn","checkboxLabel","buildCheckbox","message","line1","line2","line3","cancelPaginationBtn","CancelPaginationResponse","checkBox","continuePaginationBtn","DataUnitDataLoader","callBack","duName","resp","loadedRecords","requestLoadingInfo","dataLoader","responseLoadingInfo","newRequest","newLoadingInfo","confirm","recreateCache","info","loadAllRecords","lastRowLimitAsked","askRowLimitNumber","nextLimitToAsk","loadDataResult","dataUnitPagination","pageSize","total","__rest","s","p","i","DATA_UNIT_NAME_PARSER","dist","parts","resourceID","parentDataUnit","configName","ResourceIDUtils","changes","source","properties","prop","a","b","argument","parentRecordId","filteredFilters","f","updatingFields","originalUpdatingFields","key","duChanges","updatedRecordsIds","addedRecordsIds","change","changeDU","operation","dataUnitInstance","DataUnitStorage","parsedUpdatingFields","dataType","DataType","ChangeOperation","reqChange","changesFormatted","rest","dataUnitRecords","responseRecord","valueFromString","savedRecords","toUpdate","toInsert","recordsById","addedRecords","recordId","copy","updatedRecords","recordID","DataUnitTransient","_resp","response"],"mappings":"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","x_google_ignoreList":[0,1,2]}
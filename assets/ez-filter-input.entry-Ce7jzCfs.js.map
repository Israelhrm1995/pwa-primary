{"version":3,"file":"ez-filter-input.entry-Ce7jzCfs.js","sources":["../../node_modules/@sankhyalabs/ezui/dist/esm/ez-filter-input.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-baa5e267.js';\nimport { ElementIDUtils } from '@sankhyalabs/core';\nimport { C as CSSVarsUtils } from './CSSVarsUtils-acba92d7.js';\n\nconst ezFilterInputCss = \":host{display:block;width:100%}\";\n\nconst EzFilterInput = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ezChange = createEvent(this, \"ezChange\", 7);\n    this.ezSearching = createEvent(this, \"ezSearching\", 7);\n    this.ezFocusIn = createEvent(this, \"ezFocusIn\", 7);\n    this._searchingText = \"\";\n    this.handleFocus = () => {\n      if (this._searchingText === \"\") {\n        this._textInput.value = \"\";\n      }\n      else {\n        this._textInput.value = this._searchingText;\n      }\n      this.ezFocusIn.emit();\n    };\n    this.label = undefined;\n    this.value = undefined;\n    this.enabled = true;\n    this.errorMessage = undefined;\n    this.restrict = undefined;\n    this.mode = \"regular\";\n    this.asyncSearch = false;\n    this.canShowError = true;\n    this.autoFocus = false;\n  }\n  observeLabel() {\n    if (this._textInput) {\n      this._textInput.label = this.label;\n    }\n  }\n  observeErrorMessage() {\n    if (this._textInput) {\n      this._textInput.errorMessage = this.errorMessage;\n    }\n  }\n  observeValue(newValue, oldValue) {\n    if (this._textInput && newValue != oldValue) {\n      this._textInput.value = newValue;\n      this.ezChange.emit(newValue);\n    }\n  }\n  /**\n   * Aplica o foco no campo.\n   */\n  async setFocus(options) {\n    this._textInput.setFocus(options);\n  }\n  /**\n   * Remove o foco do campo.\n   */\n  async setBlur() {\n    this._textInput.setBlur();\n  }\n  /**\n   * Retorna se o conteúdo é inválido.\n   */\n  async isInvalid() {\n    return typeof this.errorMessage === \"string\" && this.errorMessage.trim() !== \"\";\n  }\n  /**\n   * Método responsável por setar um novo valor ao campo.\n   */\n  async setValue(newValue) {\n    if (!this.asyncSearch || this._textInput == undefined) {\n      return;\n    }\n    if (newValue !== this.value) {\n      this.value = newValue;\n      this._searchingText = \"\";\n    }\n    else {\n      this._textInput.value = newValue;\n    }\n  }\n  /**\n   * Método responsável por resetar o valor do campo para o ultimo valor inputado.\n   */\n  async endSearch() {\n    if (!this.asyncSearch || this._textInput == undefined) {\n      return;\n    }\n    if (this._textInput.value !== this.value) {\n      this._textInput.value = this.value;\n    }\n  }\n  handleChange(evt) {\n    const newValue = evt.detail;\n    this.errorMessage = \"\";\n    if (this.asyncSearch) {\n      this._searchingText = newValue;\n      this.ezSearching.emit(newValue);\n    }\n    else if (newValue !== this.value) {\n      this.value = newValue;\n    }\n  }\n  componentDidLoad() {\n    CSSVarsUtils.applyVarsTextInput(this._elem, this._textInput);\n    if (this.autoFocus) {\n      requestAnimationFrame(() => {\n        this.setFocus({ selectText: true });\n      });\n    }\n  }\n  render() {\n    ElementIDUtils.addIDInfoIfNotExists(this._elem, 'input');\n    return (h(\"ez-text-input\", { \"data-element-id\": ElementIDUtils.getInternalIDInfo(\"textInput\"), ref: elem => this._textInput = elem, label: this.label, onEzChange: evt => this.handleChange(evt), value: this.value, enabled: this.enabled, errorMessage: this.errorMessage, restrict: this.restrict, mode: this.mode, onFocusin: this.handleFocus, canShowError: this.canShowError }, h(\"ez-icon\", { slot: \"leftIcon\", iconName: \"search\" })));\n  }\n  get _elem() { return getElement(this); }\n  static get watchers() { return {\n    \"label\": [\"observeLabel\"],\n    \"errorMessage\": [\"observeErrorMessage\"],\n    \"value\": [\"observeValue\"]\n  }; }\n};\nEzFilterInput.style = ezFilterInputCss;\n\nexport { EzFilterInput as ez_filter_input };\n"],"names":["ezFilterInputCss","EzFilterInput","hostRef","registerInstance","createEvent","newValue","oldValue","options","evt","CSSVarsUtils","ElementIDUtils","h","elem","getElement"],"mappings":"8KAIA,MAAMA,EAAmB,kCAEnBC,EAAgB,KAAM,CAC1B,YAAYC,EAAS,CACnBC,EAAiB,KAAMD,CAAO,EAC9B,KAAK,SAAWE,EAAY,KAAM,UAAa,EAC/C,KAAK,YAAcA,EAAY,KAAM,aAAgB,EACrD,KAAK,UAAYA,EAAY,KAAM,WAAc,EACjD,KAAK,eAAiB,GACtB,KAAK,YAAc,IAAM,CACnB,KAAK,iBAAmB,GAC1B,KAAK,WAAW,MAAQ,GAGxB,KAAK,WAAW,MAAQ,KAAK,eAE/B,KAAK,UAAU,KAAM,CACtB,EACD,KAAK,MAAQ,OACb,KAAK,MAAQ,OACb,KAAK,QAAU,GACf,KAAK,aAAe,OACpB,KAAK,SAAW,OAChB,KAAK,KAAO,UACZ,KAAK,YAAc,GACnB,KAAK,aAAe,GACpB,KAAK,UAAY,EACrB,CACE,cAAe,CACT,KAAK,aACP,KAAK,WAAW,MAAQ,KAAK,MAEnC,CACE,qBAAsB,CAChB,KAAK,aACP,KAAK,WAAW,aAAe,KAAK,aAE1C,CACE,aAAaC,EAAUC,EAAU,CAC3B,KAAK,YAAcD,GAAYC,IACjC,KAAK,WAAW,MAAQD,EACxB,KAAK,SAAS,KAAKA,CAAQ,EAEjC,CAIE,MAAM,SAASE,EAAS,CACtB,KAAK,WAAW,SAASA,CAAO,CACpC,CAIE,MAAM,SAAU,CACd,KAAK,WAAW,QAAS,CAC7B,CAIE,MAAM,WAAY,CAChB,OAAO,OAAO,KAAK,cAAiB,UAAY,KAAK,aAAa,KAAI,IAAO,EACjF,CAIE,MAAM,SAASF,EAAU,CACnB,CAAC,KAAK,aAAe,KAAK,YAAc,OAGxCA,IAAa,KAAK,OACpB,KAAK,MAAQA,EACb,KAAK,eAAiB,IAGtB,KAAK,WAAW,MAAQA,EAE9B,CAIE,MAAM,WAAY,CACZ,CAAC,KAAK,aAAe,KAAK,YAAc,MAGxC,KAAK,WAAW,QAAU,KAAK,QACjC,KAAK,WAAW,MAAQ,KAAK,MAEnC,CACE,aAAaG,EAAK,CAChB,MAAMH,EAAWG,EAAI,OACrB,KAAK,aAAe,GAChB,KAAK,aACP,KAAK,eAAiBH,EACtB,KAAK,YAAY,KAAKA,CAAQ,GAEvBA,IAAa,KAAK,QACzB,KAAK,MAAQA,EAEnB,CACE,kBAAmB,CACjBI,EAAa,mBAAmB,KAAK,MAAO,KAAK,UAAU,EACvD,KAAK,WACP,sBAAsB,IAAM,CAC1B,KAAK,SAAS,CAAE,WAAY,EAAI,CAAE,CAC1C,CAAO,CAEP,CACE,QAAS,CACP,OAAAC,EAAe,qBAAqB,KAAK,MAAO,OAAO,EAC/CC,EAAE,gBAAiB,CAAE,kBAAmBD,EAAe,kBAAkB,WAAW,EAAG,IAAKE,GAAQ,KAAK,WAAaA,EAAM,MAAO,KAAK,MAAO,WAAYJ,GAAO,KAAK,aAAaA,CAAG,EAAG,MAAO,KAAK,MAAO,QAAS,KAAK,QAAS,aAAc,KAAK,aAAc,SAAU,KAAK,SAAU,KAAM,KAAK,KAAM,UAAW,KAAK,YAAa,aAAc,KAAK,YAAY,EAAIG,EAAE,UAAW,CAAE,KAAM,WAAY,SAAU,QAAU,CAAA,CAAC,CACjb,CACE,IAAI,OAAQ,CAAE,OAAOE,EAAW,IAAI,CAAE,CACtC,WAAW,UAAW,CAAE,MAAO,CAC7B,MAAS,CAAC,cAAc,EACxB,aAAgB,CAAC,qBAAqB,EACtC,MAAS,CAAC,cAAc,CAC5B,CAAI,CACJ,EACAZ,EAAc,MAAQD","x_google_ignoreList":[0]}
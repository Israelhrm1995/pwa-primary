{"version":3,"file":"fields-layout.entry-C_2cmZN2.js","sources":["../../node_modules/@sankhyalabs/sankhyablocks/dist/esm/fields-layout.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, f as forceUpdate, h, H as Host, g as getElement } from './index-479e1293.js';\nimport { StringUtils, ObjectUtils } from '@sankhyalabs/core';\nimport { S as Sortable } from './sortable.esm-842f85a3.js';\nimport { S as SORTABLE_PATH, d as getFieldsStructure, I as ID_AVAILABLE_FIELDS } from './FormConfigHelper-49fe72ca.js';\nimport { a as TAB_NAMES, G as GROUP_NAMES } from './constants-7b422de0.js';\nimport { ApplicationUtils } from '@sankhyalabs/ezui/dist/collection/utils';\n\nconst fieldsLayoutCss = \".sc-fields-layout-h{display:flex;padding:12px;box-shadow:var(--shadow--small, 0 0 16px rgba(0, 38, 111, 0.07));border-radius:var(--border--radius-medium, 6px);height:var(--snk-form-config-container-height);flex-direction:column}.layout-container.sc-fields-layout{container-type:inline-size;display:flex;flex-direction:column;overflow:auto;height:calc(100vh - 225px)}.guide-header.sc-fields-layout{display:flex;width:100%;font-size:20px;border-bottom:1px solid #dce0e8;margin-bottom:6px;align-items:center;height:45px}.guide-header.sc-fields-layout ez-button.sc-fields-layout{transition:all 0.2s ease-in-out;visibility:hidden;opacity:0}.guide-header.sc-fields-layout:hover ez-button.sc-fields-layout{visibility:visible;opacity:1}.guide-header-label.sc-fields-layout{display:block;padding:10px 0}.group-config.sc-fields-layout{padding:12px 0;display:flex;flex-direction:column;width:100%}.group-content.sc-fields-layout{display:grid;gap:12px;min-height:65px;width:100%;padding:6px 0;grid-template-columns:repeat(auto-fill, minmax(250px, 1fr))}.group-content.empty-content.sc-fields-layout{position:relative}.group-content.empty-content.sc-fields-layout::before{content:\\\"Arraste e solte um campo aqui\\\";color:#cbcfd7;font-size:16px;font-weight:500;text-align:center;position:absolute;inset:0;display:flex;align-items:center;justify-content:center;pointer-events:none;transition:opacity 0.3s;height:100%;box-sizing:border-box;padding:10px;background:#f9f9f9;border:1px dashed #dce0e8;border-radius:6px}.no-group-container.sc-fields-layout{padding:12px 0;width:100%;border-bottom:1px solid #dce0e8}.no-group-container.sc-fields-layout::before{content:\\\"Inclua estes campos nos grupos ou deixe-os separados no topo do formulário\\\";width:100%;display:block;font-size:16px;font-weight:400;color:#AFB6C0;padding-bottom:12px}.add-group-container.sc-fields-layout{display:flex;align-items:center;border-top:1px solid #dce0e8;padding-top:22px;padding-bottom:12px;gap:6px;cursor:pointer;justify-content:center;width:100%;height:55px}.no-guide-selected.sc-fields-layout{display:block;margin:auto;font-size:24px;color:#AFB6C0;font-weight:500}.ghost.sc-fields-layout{opacity:.5;background:#c8fbe2}\";\n\nconst FieldLayoutComponent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.isEditingGuideName = createEvent(this, \"isEditingGuideName\", 7);\n    this.isEditingGroupName = createEvent(this, \"isEditingGroupName\", 7);\n    this.layoutChanged = createEvent(this, \"layoutChanged\", 7);\n    this.setFieldListAsAvailable = createEvent(this, \"setFieldListAsAvailable\", 7);\n    this.guideRenamed = createEvent(this, \"guideRenamed\", 7);\n    this.ID_GROUPS = 'container-groups';\n    this.ID_FIELDS = 'container-fields';\n    this.reservedGuideNames = [TAB_NAMES.main.toLowerCase(), TAB_NAMES.general.toLocaleLowerCase()];\n    this.groupsListMemory = [];\n    this.groupsRefList = [];\n    this.isEditGuideNameActive = false;\n    this.selectedGuide = undefined;\n    this.groupsList = [];\n    this.guideNames = [];\n    this.dataUnit = undefined;\n    this.messagesBuilder = undefined;\n  }\n  handleFieldConfigChanged({ detail }) {\n    const updatedField = detail;\n    const groupToUpdate = this.groupsListMemory.find(g => g.name === updatedField.group);\n    if (!groupToUpdate)\n      return;\n    const updatedFields = groupToUpdate.fields.map(field => {\n      return (field.name === updatedField.name) ? updatedField : field;\n    });\n    const updatedGroupList = this.groupsListMemory.map(group => {\n      return (group.name === groupToUpdate.name)\n        ? { name: group.name, fields: updatedFields }\n        : group;\n    });\n    this.applyGroupUpdate(updatedGroupList);\n  }\n  observeSelectedGuide() {\n    this.isEditGuideNameActive = false;\n    forceUpdate(this);\n    this.isEditingGroupName.emit(false);\n  }\n  observeGroupList(newValue) {\n    this.groupsListMemory = [...newValue];\n  }\n  observeIsEditGuideNameActive(newValue) {\n    this.isEditingGuideName.emit(newValue);\n  }\n  async addFieldToLayout(incomingField) {\n    incomingField.group = GROUP_NAMES.noGroup;\n    incomingField.tab = this.selectedGuide.name;\n    const fixedFieldsGroup = this.getFixedFieldsGroup();\n    const newFixedFieldsGroup = {\n      name: GROUP_NAMES.noGroup,\n      fields: fixedFieldsGroup ? [...fixedFieldsGroup.fields, incomingField] : [incomingField],\n    };\n    const updatedGroupListMemory = fixedFieldsGroup\n      ? [newFixedFieldsGroup, ...this.groupsListMemory.slice(1)]\n      : [newFixedFieldsGroup, ...this.groupsListMemory];\n    this.applyGroupUpdate(updatedGroupListMemory);\n  }\n  getFixedFieldsGroup() {\n    return this.groupsListMemory.find(g => g.name === GROUP_NAMES.noGroup);\n  }\n  getMessage(key, params) {\n    return this.messagesBuilder.getMessage(key, params);\n  }\n  handleAddGroup() {\n    const newGroup = { name: this.buildNewGroupName(), fields: [] };\n    const updatedGroupsList = [...this.groupsListMemory, newGroup];\n    this.applyGroupUpdate(updatedGroupsList);\n  }\n  buildNewGroupName() {\n    var _a, _b;\n    const qtdWithNewGroupName = (_b = (_a = this.groupsListMemory.filter(g => g.name.includes(GROUP_NAMES.newGroup))) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n    return qtdWithNewGroupName === 0\n      ? GROUP_NAMES.newGroup\n      : `${GROUP_NAMES.newGroup} (${qtdWithNewGroupName})`;\n  }\n  makeDynamicFieldsContainersDraggable() {\n    const draggableGroups = this.groupsList.filter((g) => g.name !== GROUP_NAMES.noGroup);\n    draggableGroups.forEach(group => {\n      this.makeFieldContainerDraggable(this.getFieldsContainerId(group.name));\n    });\n  }\n  getFieldsContainerId(groupName) {\n    return `${this.ID_FIELDS}-${StringUtils.replaceBlankCharacters(groupName)}`;\n  }\n  handleSortGroups(evt) {\n    var _a;\n    const htmlStructure = (_a = evt.to) === null || _a === void 0 ? void 0 : _a.children;\n    if (!htmlStructure)\n      return;\n    const groupsOrder = Array.from(htmlStructure).map(el => el.getAttribute('data-group-name'));\n    const updatedOrderGroupsList = [];\n    const fixedGroup = this.getFixedFieldsGroup();\n    if (fixedGroup) {\n      updatedOrderGroupsList.push(fixedGroup);\n    }\n    groupsOrder.forEach(groupName => {\n      const group = this.groupsListMemory.find(g => g.name === groupName);\n      if (group) {\n        updatedOrderGroupsList.push(group);\n      }\n    });\n    this.applyGroupUpdate(updatedOrderGroupsList);\n  }\n  handleFieldsChanged(evt) {\n    let updatedGroupsList = [...this.groupsListMemory];\n    updatedGroupsList = [...this.handleFieldsOnGroupUpdate(updatedGroupsList, evt, SORTABLE_PATH.FROM)];\n    updatedGroupsList = [...this.handleFieldsOnGroupUpdate(updatedGroupsList, evt, SORTABLE_PATH.TO)];\n    this.applyGroupUpdate(updatedGroupsList);\n  }\n  applyGroupUpdate(updatedGroupList) {\n    var _a;\n    (_a = this.groupsRefList) === null || _a === void 0 ? void 0 : _a.forEach((group) => group === null || group === void 0 ? void 0 : group.cancelEdition());\n    if (ObjectUtils.equals(updatedGroupList, this.groupsListMemory)) {\n      return false;\n    }\n    this.groupsListMemory = [...updatedGroupList];\n    this.layoutChanged.emit(this.groupsListMemory);\n    return true;\n  }\n  handleFieldsOnGroupUpdate(groupList, evt, path) {\n    const element = evt[path];\n    const isAvailableFields = element.id === ID_AVAILABLE_FIELDS;\n    return isAvailableFields ? groupList : this.updateGroupList(groupList, element, path, evt);\n  }\n  updateGroupList(groupList, element, path, evt) {\n    const groupName = element.getAttribute('data-group-name');\n    const updatedGroup = {\n      name: groupName,\n      fields: getFieldsStructure(evt, path, groupName, this.selectedGuide.name),\n    };\n    return this.replaceGroup(groupList, updatedGroup);\n  }\n  replaceGroup(groupList, newGroup) {\n    return groupList.map(group => group.name === newGroup.name ? newGroup : group);\n  }\n  makeGroupsDraggable() {\n    try {\n      const element = this.getContainerElement(this.ID_GROUPS);\n      if (!element)\n        return;\n      new Sortable(element, {\n        group: 'groups',\n        ghostClass: 'ghost',\n        direction: 'horizontal',\n        animation: 15,\n        onSort: (evt) => this.handleSortGroups(evt),\n      });\n    }\n    catch (e) {\n      console.error('Falha ao tornar container de grupos arrastável: ', this.ID_GROUPS);\n    }\n  }\n  makeFieldContainerDraggable(containerId) {\n    try {\n      const element = this.getContainerElement(containerId);\n      if (!element)\n        return;\n      new Sortable(element, {\n        group: 'fields',\n        ghostClass: 'ghost',\n        direction: 'vertical',\n        animation: 15,\n        onAdd: (evt) => this.handleFieldsChanged(evt),\n        onRemove: (evt) => this.handleFieldsChanged(evt),\n        onSort: (evt) => this.handleFieldsChanged(evt),\n      });\n    }\n    catch (e) {\n      console.error('Falha ao tornar grupo arrastável: ', containerId);\n    }\n  }\n  getContainerElement(id) {\n    return this.el.querySelector(`[id=\"${id}\"]`);\n  }\n  handleSetFieldAsAvailable(field) {\n    var _a;\n    const groupName = (_a = field.group) !== null && _a !== void 0 ? _a : GROUP_NAMES.noGroup;\n    const group = this.groupsListMemory.find(group => group.name === groupName);\n    const fields = group.fields.filter(f => f.name !== field.name);\n    const updatedGroup = { name: groupName, fields };\n    const updatedList = [...this.replaceGroup(this.groupsListMemory, updatedGroup)];\n    this.applyGroupUpdate(updatedList);\n  }\n  removeGroup(group) {\n    var _a, _b;\n    const groupFields = (_b = (_a = this.groupsListMemory.find(f => f.name === group.name)) === null || _a === void 0 ? void 0 : _a.fields) !== null && _b !== void 0 ? _b : [];\n    const updatedGroupList = [...this.groupsListMemory.filter(g => g.name !== group.name)];\n    if (this.applyGroupUpdate(updatedGroupList)) {\n      this.setFieldListAsAvailable.emit(groupFields);\n    }\n  }\n  handleRenameGroup(editDetails) {\n    const { value: actualName, newValue: newGroupName } = editDetails.detail;\n    const updatedGroupList = this.groupsListMemory.map(group => {\n      if (group.name !== actualName)\n        return Object.assign({}, group);\n      const updatedFields = group.fields.map(f => {\n        return Object.assign(Object.assign({}, f), { group: newGroupName });\n      });\n      return { name: newGroupName, fields: updatedFields };\n    });\n    this.applyGroupUpdate(updatedGroupList);\n  }\n  canSaveGroup(newLabel, index) {\n    const hasOtherWithThisName = this.groupsList.some(group => {\n      var _a;\n      return ((_a = group.name) !== null && _a !== void 0 ? _a : '').toLocaleLowerCase() === (newLabel !== null && newLabel !== void 0 ? newLabel : '').toLocaleLowerCase();\n    });\n    if (!hasOtherWithThisName)\n      return true;\n    const title = this.getMessage('snkFormConfig.confirm.title');\n    const message = this.buildDuplicatedGroupNameContent(newLabel);\n    ApplicationUtils.alert(title, message).then(() => { var _a; return (_a = this.groupsRefList[index]) === null || _a === void 0 ? void 0 : _a.applyFocusTextEdit(); });\n    return false;\n  }\n  buildDuplicatedGroupNameContent(newLabel) {\n    const tabName = this.selectedGuide.name;\n    return `\n        ${this.getMessage('snkFormConfig.alert.titleGroupExists')}\n        <b>${newLabel}</b>\n        ${this.getMessage('snkFormConfig.alert.inTab')}\n        <b>${tabName === TAB_NAMES.main ? this.getMessage('snkFormConfig.form.mainArea') : tabName}</b>.\n        <br/><br/>\n        ${this.getMessage('snkFormConfig.alert.infoValidTitle')}\n      `;\n  }\n  buildDuplicatedTabNameContent(newLabel) {\n    return `\n        ${this.getMessage('snkFormConfig.alert.titleGuideExists')}\n        <b>${newLabel}</b>.\n        <br/><br/>\n        ${this.getMessage('snkFormConfig.alert.infoValidTitle')}\n      `;\n  }\n  buildReservedTabNameContent(newLabel) {\n    return `\n        ${this.getMessage('snkFormConfig.alert.titleGuideReservedName')}\n        <br/><br/>\n        <b>${newLabel}</b>.\n        <br/><br/>\n        ${this.getMessage('snkFormConfig.alert.infoValidTitle')}\n      `;\n  }\n  renderFields(fields) {\n    if (fields.length === 0)\n      return;\n    return fields.map(field => (h(\"field-item\", { key: field.name, fieldConfig: field, onLayoutConfig: true, dataUnit: this.dataUnit, messagesBuilder: this.messagesBuilder, onSetFieldAsAvailable: (e) => this.handleSetFieldAsAvailable(e.detail) })));\n  }\n  renderDraggableGroups() {\n    const draggableGroups = this.groupsList.filter(g => g.name !== GROUP_NAMES.noGroup);\n    return (draggableGroups.map((group, index) => {\n      var _a;\n      return (h(\"div\", { key: group.name, class: 'group-config', \"data-group-name\": group.name }, h(\"ez-collapsible-box\", { ref: ref => this.groupsRefList[index] = ref, label: group.name, headerSize: \"large\", editable: true, removable: true, \"icon-placement\": \"left\", onEzRemove: () => this.removeGroup(group), onEzSaveEditLabel: (event => this.handleRenameGroup(event)), onEzEditLabelMode: ({ detail }) => this.isEditingGroupName.emit(detail), conditionalSave: (newLabel) => this.canSaveGroup(newLabel, index) }, h(\"div\", { id: this.getFieldsContainerId(group.name), class: `group-content ${!((_a = group.fields) === null || _a === void 0 ? void 0 : _a.length) ? 'empty-content' : ''}`, \"data-group-name\": group.name }, this.renderFields(group.fields)))));\n    }));\n  }\n  renderFixedFields() {\n    var _a, _b;\n    const noGroupFields = (_b = (_a = this.groupsList.find(g => g.name === GROUP_NAMES.noGroup)) === null || _a === void 0 ? void 0 : _a.fields) !== null && _b !== void 0 ? _b : [];\n    return this.renderFields(noGroupFields);\n  }\n  handleRenameGuide(editDetails) {\n    const { value: actualValue, newValue } = editDetails.detail;\n    this.isEditGuideNameActive = false;\n    if (newValue === actualValue) {\n      return;\n    }\n    const duplicatedName = this.guideNames.includes(newValue.toLowerCase());\n    const forbiddenName = this.reservedGuideNames.includes(newValue.toLowerCase());\n    if (forbiddenName || duplicatedName) {\n      const title = this.getMessage('snkFormConfig.confirm.title');\n      const message = forbiddenName ? this.buildReservedTabNameContent(newValue) : this.buildDuplicatedTabNameContent(newValue);\n      ApplicationUtils.alert(title, message).then(() => this._refTextEdit.applyFocusSelect());\n      return;\n    }\n    this.guideRenamed.emit(newValue);\n  }\n  cancelEditGuideName() {\n    this.isEditGuideNameActive = false;\n  }\n  async startGuideNameEdition() {\n    this.isEditGuideNameActive = true;\n    setTimeout(async () => {\n      await this._refTextEdit.applyFocusSelect();\n    }, 200);\n  }\n  getTextEditStyle() {\n    return {\n      fontSize: '20px',\n      fontWeight: '500',\n      fontFamily: 'Roboto',\n    };\n  }\n  renderGuideName() {\n    var _a, _b;\n    if (this.isEditGuideNameActive) {\n      return (h(\"div\", { class: 'guide-header' }, h(\"ez-text-edit\", { class: \"collapsible-box__text-edit\", ref: ref => this._refTextEdit = ref, value: (_a = this.selectedGuide) === null || _a === void 0 ? void 0 : _a.label, styled: this.getTextEditStyle(), onSaveEdition: (ev) => this.handleRenameGuide(ev), onCancelEdition: () => this.cancelEditGuideName() })));\n    }\n    return (h(\"div\", { class: 'guide-header' }, h(\"span\", { class: 'guide-header-label' }, (_b = this.selectedGuide) === null || _b === void 0 ? void 0 : _b.label), this.renderEditGuideNameButton()));\n  }\n  renderEditGuideNameButton() {\n    var _a;\n    if (((_a = this.selectedGuide) === null || _a === void 0 ? void 0 : _a.name) === TAB_NAMES.main)\n      return;\n    return (h(\"ez-button\", { mode: \"icon\", class: \"ez-button--tertiary\", onClick: () => this.startGuideNameEdition(), size: \"medium\", iconName: 'edit', title: 'Renomear' }));\n  }\n  componentDidRender() {\n    this.makeGroupsDraggable();\n    this.makeDynamicFieldsContainersDraggable();\n    this.makeFieldContainerDraggable(GROUP_NAMES.noGroup);\n  }\n  render() {\n    if (!this.selectedGuide) {\n      return (h(Host, { class: 'ez-flex-item--auto ez-size-height--full ez-box ez-padding--medium content-container' }, h(\"span\", { class: 'no-guide-selected' }, \"Selecione uma guia e comece a configurar\")));\n    }\n    return (h(Host, { class: 'ez-flex-item--auto ez-size-height--full ez-box ez-padding--medium content-container' }, this.renderGuideName(), h(\"div\", { class: 'layout-container' }, h(\"ez-scroller\", { direction: 'vertical', activeShadow: true }, h(\"div\", { class: 'no-group-container' }, h(\"div\", { id: GROUP_NAMES.noGroup, class: 'group-content', \"data-group-name\": GROUP_NAMES.noGroup }, this.renderFixedFields())), h(\"hr\", null), h(\"div\", { id: this.ID_GROUPS, class: 'groups-container' }, this.renderDraggableGroups()))), h(\"div\", { class: 'add-group-container', onClick: this.handleAddGroup.bind(this) }, h(\"ez-icon\", { slot: \"leftIcon\", iconName: \"plus\" }), h(\"span\", null, \"Criar novo grupo\"))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"selectedGuide\": [\"observeSelectedGuide\"],\n    \"groupsList\": [\"observeGroupList\"],\n    \"isEditGuideNameActive\": [\"observeIsEditGuideNameActive\"]\n  }; }\n};\nFieldLayoutComponent.style = fieldsLayoutCss;\n\nexport { FieldLayoutComponent as fields_layout };\n"],"names":["fieldsLayoutCss","FieldLayoutComponent","hostRef","registerInstance","createEvent","TAB_NAMES","detail","updatedField","groupToUpdate","g","updatedFields","field","updatedGroupList","group","forceUpdate","newValue","incomingField","GROUP_NAMES","fixedFieldsGroup","newFixedFieldsGroup","updatedGroupListMemory","key","params","newGroup","updatedGroupsList","_a","_b","qtdWithNewGroupName","groupName","StringUtils","evt","htmlStructure","groupsOrder","el","updatedOrderGroupsList","fixedGroup","SORTABLE_PATH","ObjectUtils","groupList","path","element","ID_AVAILABLE_FIELDS","updatedGroup","getFieldsStructure","Sortable","containerId","id","fields","f","updatedList","groupFields","editDetails","actualName","newGroupName","newLabel","index","title","message","ApplicationUtils","tabName","h","e","ref","event","noGroupFields","actualValue","duplicatedName","forbiddenName","ev","Host","getElement"],"mappings":"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","x_google_ignoreList":[0]}
{"version":3,"file":"index-b72af127-CE4mFloS.js","sources":["../../node_modules/@sankhyalabs/sankhyablocks/dist/esm/index-b72af127.js"],"sourcesContent":["import { a as getRenderingRef, f as forceUpdate } from './index-479e1293.js';\n\nconst appendToMap = (map, propName, value) => {\n    const items = map.get(propName);\n    if (!items) {\n        map.set(propName, [value]);\n    }\n    else if (!items.includes(value)) {\n        items.push(value);\n    }\n};\nconst debounce = (fn, ms) => {\n    let timeoutId;\n    return (...args) => {\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(() => {\n            timeoutId = 0;\n            fn(...args);\n        }, ms);\n    };\n};\n\n/**\n * Check if a possible element isConnected.\n * The property might not be there, so we check for it.\n *\n * We want it to return true if isConnected is not a property,\n * otherwise we would remove these elements and would not update.\n *\n * Better leak in Edge than to be useless.\n */\nconst isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;\nconst cleanupElements = debounce((map) => {\n    for (let key of map.keys()) {\n        map.set(key, map.get(key).filter(isConnected));\n    }\n}, 2_000);\nconst stencilSubscription = () => {\n    if (typeof getRenderingRef !== 'function') {\n        // If we are not in a stencil project, we do nothing.\n        // This function is not really exported by @stencil/core.\n        return {};\n    }\n    const elmsToUpdate = new Map();\n    return {\n        dispose: () => elmsToUpdate.clear(),\n        get: (propName) => {\n            const elm = getRenderingRef();\n            if (elm) {\n                appendToMap(elmsToUpdate, propName, elm);\n            }\n        },\n        set: (propName) => {\n            const elements = elmsToUpdate.get(propName);\n            if (elements) {\n                elmsToUpdate.set(propName, elements.filter(forceUpdate));\n            }\n            cleanupElements(elmsToUpdate);\n        },\n        reset: () => {\n            elmsToUpdate.forEach((elms) => elms.forEach(forceUpdate));\n            cleanupElements(elmsToUpdate);\n        },\n    };\n};\n\nconst unwrap = (val) => (typeof val === 'function' ? val() : val);\nconst createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {\n    const unwrappedState = unwrap(defaultState);\n    let states = new Map(Object.entries(unwrappedState ?? {}));\n    const handlers = {\n        dispose: [],\n        get: [],\n        set: [],\n        reset: [],\n    };\n    const reset = () => {\n        // When resetting the state, the default state may be a function - unwrap it to invoke it.\n        // otherwise, the state won't be properly reset\n        states = new Map(Object.entries(unwrap(defaultState) ?? {}));\n        handlers.reset.forEach((cb) => cb());\n    };\n    const dispose = () => {\n        // Call first dispose as resetting the state would\n        // cause less updates ;)\n        handlers.dispose.forEach((cb) => cb());\n        reset();\n    };\n    const get = (propName) => {\n        handlers.get.forEach((cb) => cb(propName));\n        return states.get(propName);\n    };\n    const set = (propName, value) => {\n        const oldValue = states.get(propName);\n        if (shouldUpdate(value, oldValue, propName)) {\n            states.set(propName, value);\n            handlers.set.forEach((cb) => cb(propName, value, oldValue));\n        }\n    };\n    const state = (typeof Proxy === 'undefined'\n        ? {}\n        : new Proxy(unwrappedState, {\n            get(_, propName) {\n                return get(propName);\n            },\n            ownKeys(_) {\n                return Array.from(states.keys());\n            },\n            getOwnPropertyDescriptor() {\n                return {\n                    enumerable: true,\n                    configurable: true,\n                };\n            },\n            has(_, propName) {\n                return states.has(propName);\n            },\n            set(_, propName, value) {\n                set(propName, value);\n                return true;\n            },\n        }));\n    const on = (eventName, callback) => {\n        handlers[eventName].push(callback);\n        return () => {\n            removeFromArray(handlers[eventName], callback);\n        };\n    };\n    const onChange = (propName, cb) => {\n        const unSet = on('set', (key, newValue) => {\n            if (key === propName) {\n                cb(newValue);\n            }\n        });\n        // We need to unwrap the defaultState because it might be a function.\n        // Otherwise we might not be sending the right reset value.\n        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));\n        return () => {\n            unSet();\n            unReset();\n        };\n    };\n    const use = (...subscriptions) => {\n        const unsubs = subscriptions.reduce((unsubs, subscription) => {\n            if (subscription.set) {\n                unsubs.push(on('set', subscription.set));\n            }\n            if (subscription.get) {\n                unsubs.push(on('get', subscription.get));\n            }\n            if (subscription.reset) {\n                unsubs.push(on('reset', subscription.reset));\n            }\n            if (subscription.dispose) {\n                unsubs.push(on('dispose', subscription.dispose));\n            }\n            return unsubs;\n        }, []);\n        return () => unsubs.forEach((unsub) => unsub());\n    };\n    const forceUpdate = (key) => {\n        const oldValue = states.get(key);\n        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));\n    };\n    return {\n        state,\n        get,\n        set,\n        on,\n        onChange,\n        use,\n        dispose,\n        reset,\n        forceUpdate,\n    };\n};\nconst removeFromArray = (array, item) => {\n    const index = array.indexOf(item);\n    if (index >= 0) {\n        array[index] = array[array.length - 1];\n        array.length--;\n    }\n};\n\nconst createStore = (defaultState, shouldUpdate) => {\n    const map = createObservableMap(defaultState, shouldUpdate);\n    map.use(stencilSubscription());\n    return map;\n};\n\nconst store = createStore({\n  exporterProviders: {},\n  filterFieldsDataSource: undefined\n});\n\nexport { store as s };\n"],"names":["appendToMap","map","propName","value","items","debounce","fn","ms","timeoutId","args","isConnected","maybeElement","cleanupElements","key","stencilSubscription","getRenderingRef","elmsToUpdate","elm","elements","forceUpdate","elms","unwrap","val","createObservableMap","defaultState","shouldUpdate","a","b","unwrappedState","states","handlers","reset","cb","dispose","get","set","oldValue","state","_","on","eventName","callback","removeFromArray","unSet","newValue","unReset","subscriptions","unsubs","subscription","unsub","array","item","index","createStore","store"],"mappings":"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","x_google_ignoreList":[0]}
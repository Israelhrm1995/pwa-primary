{"version":3,"file":"snk-grid.entry-UdnAXx9K.js","sources":["../../node_modules/@sankhyalabs/sankhyablocks/dist/esm/snk-grid.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, F as Fragment, g as getElement } from './index-479e1293.js';\nimport { KeyboardManager, Action, ElementIDUtils, ApplicationContext, StringUtils } from '@sankhyalabs/core';\nimport { T as TaskbarElement } from './taskbar-elements-171476d4.js';\nimport { C as ConfigStorage } from './ConfigStorage-cf578768.js';\nimport { P as PresentationMode, E as ExporterStrategy } from './index-b40568ff.js';\nimport { T as TaskbarProcessor } from './taskbar-processor-3436124c.js';\nimport { s as store } from './index-b72af127.js';\nimport { C as CommonsExporter, S as SnkMultiSelectionListDataSource, a as CrudUtils, R as RmPrecisionCustomValueFormatter, b as ContinuousInsertUtils, c as ClientSideExporterProvider } from './ClientSideExporterProvider-09dee1a3.js';\nimport { SelectionMode } from '@sankhyalabs/core/dist/dataunit/DataUnit';\nimport './DataFetcher-db08cad0.js';\nimport './ISave-da565824.js';\nimport '@sankhyalabs/ezui/dist/collection/utils/constants';\nimport '@sankhyalabs/core/dist/dataunit/metadata/UnitMetadata';\nimport './dataunit-fetcher-1b78797a.js';\nimport './filter-item-type.enum-d45e026f.js';\nimport './form-config-fetcher-e623539b.js';\nimport './constants-7b422de0.js';\nimport { g as getSelectedRecordsIDsInfo } from './GetSelectedRecordsIDsInfo-9fa41508.js';\nimport { buildFieldSearch } from '@sankhyalabs/ezui/dist/collection/utils';\nimport '@sankhyalabs/ezui/dist/collection/components/ez-grid/utils/InMemoryFilterColumnDataSource';\nimport './IFetchDataExporterParams-d73bed3d.js';\nimport './PrintUtils-3e4ff0f5.js';\nimport '@sankhyalabs/ezui/dist/collection/components/ez-grid/utils';\nimport '@sankhyalabs/core/dist/utils/SortingUtils';\nimport './ResourceIDUtils-a114189a.js';\n\nclass ServerSideExporterProvider extends CommonsExporter {\n  getFilters() {\n    var _a;\n    return (_a = this.dataUnit) === null || _a === void 0 ? void 0 : _a.getAppliedFilters();\n  }\n  getOrders() {\n    var _a;\n    return (_a = this.dataUnit) === null || _a === void 0 ? void 0 : _a.getSort();\n  }\n  getResourceURI() {\n    var _a;\n    return (_a = this.dataUnit) === null || _a === void 0 ? void 0 : _a.name;\n  }\n  getSelectedNumber() {\n    return this.dataUnit.getSelectionInfo().length;\n  }\n  getTotalRecords() {\n    var _a, _b, _c;\n    const { total } = ((_a = this.dataUnit) === null || _a === void 0 ? void 0 : _a.getPaginationInfo()) || {};\n    return total !== null && total !== void 0 ? total : (_c = (_b = this.dataUnit) === null || _b === void 0 ? void 0 : _b.records) === null || _c === void 0 ? void 0 : _c.length;\n  }\n  getSelectedIDs() {\n    return getSelectedRecordsIDsInfo(this.dataUnit);\n  }\n  getOffset() {\n    return this.getExporterOffset(this.getPaginationInfo());\n  }\n  getPageSize() {\n    var _a;\n    return (_a = this.dataUnit) === null || _a === void 0 ? void 0 : _a.pageSize;\n  }\n  getExportLimit() {\n    return 5000;\n  }\n  getRecordID() {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.dataUnit) === null || _a === void 0 ? void 0 : _a.records) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.__record__id__;\n  }\n  getPaginationInfo() {\n    var _a;\n    return (_a = this.dataUnit) === null || _a === void 0 ? void 0 : _a.getPaginationInfo();\n  }\n  getExporterOffset(paginationInfo) {\n    if (paginationInfo == undefined) {\n      return;\n    }\n    const offset = paginationInfo.firstRecord;\n    if (offset > 0) {\n      return (offset - 1);\n    }\n    return offset;\n  }\n}\n\nconst snkGridCss = \".sc-snk-grid-h{--snk-grid-min-height:300px;--snk-grid-padding:var(--space--small)}.snk-grid__container.sc-snk-grid{display:flex;height:100%;width:100%;padding:var(--snk-grid-padding);outline:none}.snk-grid__header.sc-snk-grid{width:100%;display:flex;flex-wrap:nowrap;justify-content:flex-end}.snk-grid__filter-bar.sc-snk-grid{width:100%}.snk-grid__header-divider.sc-snk-grid{margin-bottom:var(--space--medium)}.snk-grid__table.sc-snk-grid{min-height:var(--snk-grid-min-height)}.snk-grid-container__without-shadow.sc-snk-grid{--ezgrid__container--shadow:unset}.snk-grid-container__footer.sc-snk-grid{background-color:var(--background--xlight, #FFF);border-radius:0 0 var(--border--radius-medium) var(--border--radius-medium);box-shadow:var(--shadow--small)}\";\n\nconst SnkGrid = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.actionClick = createEvent(this, \"actionClick\", 7);\n    this.gridDoubleClick = createEvent(this, \"gridDoubleClick\", 7);\n    this._customEditors = new Map();\n    this._customRenders = new Map();\n    this._keyboardManager = new KeyboardManager();\n    this._topTaskbarProcessor = new TaskbarProcessor({\n      \"snkGridTopTaskbar.regular\": [\"FORM_MODE\", \"CONFIGURATOR\", \"INSERT\"],\n      \"snkGridTopTaskbar.regular.secondary\": [\"FORM_MODE\", \"CONFIGURATOR\", \"INSERT\"],\n      \"snkGridTopTaskbar.regular.singleTaskbar\": [],\n      \"snkGridTopTaskbar.finish_edition\": [\"CANCEL\", \"SAVE\", this.handleAddFormMode()],\n      \"snkGridTopTaskbar.finish_edition.secondary\": [],\n      \"snkGridTopTaskbar.finish_edition.singleTaskbar\": [],\n    });\n    this._headerTaskbarProcessor = new TaskbarProcessor({\n      \"snkGridHeaderTaskbar.unselected\": [\"REFRESH\", \"DATA_EXPORTER\", \"ACTIONS_BUTTON\", \"MORE_OPTIONS\"],\n      \"snkGridHeaderTaskbar.selected\": this.getGridHeaderSelectedBtns(),\n      \"snkGridHeaderTaskbar.detail.unselected\": [\"REFRESH\", \"MORE_OPTIONS\"],\n      \"snkGridHeaderTaskbar.detail.selected\": [\"UPDATE\", \"ATTACH\", \"CLONE\", \"REMOVE\", \"MORE_OPTIONS\", \"DIVIDER\", \"REFRESH\"],\n      \"snkGridHeaderTaskbar.singleTaskbar.unselected\": [\"INSERT\", \"FORM_MODE\", \"CONFIGURATOR\", \"REFRESH\", \"DATA_EXPORTER\", \"ACTIONS_BUTTON\", \"MORE_OPTIONS\"],\n      \"snkGridHeaderTaskbar.singleTaskbar.selected\": [\"UPDATE\", \"CLONE\", \"REMOVE\", \"MORE_OPTIONS\", \"DIVIDER\", \"ATTACH\", \"FORM_MODE\", \"CONFIGURATOR\", \"REFRESH\", \"DATA_EXPORTER\", \"ACTIONS_BUTTON\"],\n      \"snkGridHeaderTaskbar.singleTaskbar.detail.unselected\": [\"INSERT\", \"FORM_MODE\", \"CONFIGURATOR\", \"REFRESH\", \"MORE_OPTIONS\"],\n      \"snkGridHeaderTaskbar.singleTaskbar.detail.selected\": [\"UPDATE\", \"ATTACH\", \"CLONE\", \"REMOVE\", \"MORE_OPTIONS\", \"DIVIDER\", \"FORM_MODE\", \"CONFIGURATOR\", \"REFRESH\"],\n      \"snkGridHeaderTaskbar.singleTaskbar.finish_edition\": [\"CANCEL\", \"SAVE\", this.handleAddFormMode()]\n    });\n    this.dataUnitInterceptor = {\n      interceptAction: async (action) => {\n        if (action.type === Action.METADATA_LOADED) {\n          return await this.interceptMetadataLoaded(action);\n        }\n        return action;\n      }\n    };\n    this._dataUnit = undefined;\n    this._dataState = undefined;\n    this._gridConfig = undefined;\n    this._popUpGridConfig = false;\n    this._showSnkFilterBar = true;\n    this._enableContinuousInsert = false;\n    this.columnFilterDataSource = new SnkMultiSelectionListDataSource();\n    this.enableLockManagerLoadingComp = false;\n    this.enableLockManagerTaskbarClick = false;\n    this.configName = undefined;\n    this.filterBarTitle = undefined;\n    this.resourceID = undefined;\n    this.selectionToastConfig = undefined;\n    this.actionsList = undefined;\n    this.isDetail = undefined;\n    this.taskbarManager = undefined;\n    this.statusResolver = undefined;\n    this.multipleSelection = undefined;\n    this.presentationMode = PresentationMode.PRIMARY;\n    this.messagesBuilder = undefined;\n    this.useEnterLikeTab = false;\n    this.recordsValidator = undefined;\n    this.canEdit = true;\n    this.taskbarCustomContainerId = undefined;\n    this.gridHeaderCustomSlotId = 'GRID_HEADER_CUSTOM_ELEMENTS';\n    this.topTaskbarCustomSlotId = 'GRID_TASKBAR_CUSTOM_ELEMENTS';\n    this.disablePersonalizedFilter = undefined;\n    this.gridLegacyConfigName = undefined;\n    this.filterBarLegacyConfigName = undefined;\n    this.autoLoad = undefined;\n    this.autoFocus = true;\n    this.enableGridInsert = false;\n    this.outlineMode = false;\n    this.suppressHorizontalScroll = false;\n    this.strategyExporter = ExporterStrategy.SERVER_SIDE;\n    this.useSearchColumn = true;\n    this.multipleEditionEnabled = true;\n    this.paginationCounterMode = 'auto';\n    this.suppressCheckboxColumn = undefined;\n    this.compact = undefined;\n  }\n  getGridHeaderSelectedBtns() {\n    const btns = [\n      TaskbarElement.UPDATE, TaskbarElement.CLONE, TaskbarElement.REMOVE,\n      TaskbarElement.MORE_OPTIONS, TaskbarElement.DIVIDER, TaskbarElement.ATTACH, TaskbarElement.FORM_MODE,\n      TaskbarElement.CONFIGURATOR, TaskbarElement.REFRESH, TaskbarElement.DATA_EXPORTER, TaskbarElement.ACTIONS_BUTTON\n    ];\n    if (this.multipleEditionEnabled)\n      btns.unshift(TaskbarElement.UPDATE_MULTIPLE);\n    return btns;\n  }\n  reloadConfig() {\n    this.loadConfig();\n  }\n  /**\n   * Exibe a janela de configurações da grade.\n   */\n  async showConfig() {\n    if (this._grid == undefined) {\n      return;\n    }\n    this.openGridConfig();\n  }\n  /**\n   * Fecha a janela de configurações da grade.\n   */\n  async hideConfig() {\n    if (this._grid == undefined) {\n      return;\n    }\n    this.closeGridConfig();\n  }\n  /**\n   * Atribui o valor da configuração da grade.\n   */\n  async setConfig(config) {\n    this.setGridConfig(config);\n  }\n  /**\n   * Faz o recarregamento da filter-bar da grade buscando o state no servidor.\n   */\n  async reloadFilterBar() {\n    var _a;\n    (_a = this._snkFilterBar) === null || _a === void 0 ? void 0 : _a.reload();\n  }\n  /**\n   * Retorna o elemento da filter-bar da grade.\n   */\n  async getFilterBar() {\n    return this._snkFilterBar;\n  }\n  /**\n   * Registra um editor customizado para campos da grade e formulário\n   */\n  async addCustomEditor(fieldName, customEditor, detailContext) {\n    if (this._grid) {\n      this._grid.addCustomEditor(fieldName, customEditor, detailContext);\n      return;\n    }\n    const newCustomEditors = new Map(this._customEditors);\n    newCustomEditors.set(fieldName, { customEditor, detailContext });\n    this._customEditors = newCustomEditors;\n  }\n  /**\n   * Registra um render customizado para colunas da grid.\n   */\n  async addGridCustomRender(fieldName, customRender, detailContext) {\n    if (this._grid) {\n      this._grid.addGridCustomRender(fieldName, customRender, detailContext);\n      return;\n    }\n    const newCustomRenders = new Map(this._customRenders);\n    newCustomRenders.set(fieldName, { customRender, detailContext });\n    this._customRenders = newCustomRenders;\n  }\n  /**\n   * Registra um formatador de valores para uma coluna da grid.\n   */\n  async addCustomValueFormatter(columnName, customFormatter) {\n    this._grid.addCustomValueFormatter(columnName, customFormatter);\n  }\n  /**\n   * Remove o formatador de valores de uma coluna da grid.\n   */\n  async removeCustomValueFormatter(columnName) {\n    this._grid.removeCustomValueFormatter(columnName);\n  }\n  /**\n   * Atribui o foco para a grade.\n   */\n  async setFocus() {\n    this._grid.setFocus();\n  }\n  async handleClick(event) {\n    var _a;\n    if (this.hasToBlockEvent(event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (!await this._dataUnit.cancelEdition())\n        return;\n      const newEvent = new event.constructor(event.type, event);\n      (_a = event.target) === null || _a === void 0 ? void 0 : _a.dispatchEvent(newEvent);\n    }\n    if (this._grid && !this._grid.contains(event.target)) {\n      this._grid.stopEdit();\n    }\n  }\n  hasToBlockEvent(event) {\n    var _a;\n    return ((_a = this._snkFilterBar) === null || _a === void 0 ? void 0 : _a.contains(event.target)) && this.enableGridInsert && this._dataUnit.hasNewRecord();\n  }\n  async handleGridLegacyConfigName(newLegacyConfig, oldLegacyConfig) {\n    if (!newLegacyConfig) {\n      return;\n    }\n    if (newLegacyConfig === oldLegacyConfig) {\n      return;\n    }\n    this.addGridLegacyConfigName();\n    this.loadConfig();\n  }\n  handleAddFormMode() {\n    return this.enableGridInsert ? TaskbarElement.FORM_MODE : \"\";\n  }\n  openGridConfig() {\n    this._grid.getColumnsState()\n      .then((gridColumns) => {\n      this._snkGridConfig.columns = gridColumns.filter(c => c.name);\n      this._popUpGridConfig = true;\n    });\n  }\n  closeGridConfig() {\n    this._popUpGridConfig = false;\n  }\n  setGridConfig(config) {\n    this._gridConfig = config;\n    CrudUtils.assertDefaultSorting(this._gridConfig, this._dataUnit);\n  }\n  fixColumNameCharset(columnName) {\n    try {\n      return decodeURIComponent(escape(columnName));\n    }\n    catch (e) {\n      return columnName;\n    }\n  }\n  normalizeGridConfig(config) {\n    if (!config)\n      return config;\n    const columnsMapped = config.columns.map(column => (Object.assign(Object.assign({}, column), { name: this.fixColumNameCharset(column.name) })));\n    return Object.assign(Object.assign({}, config), { columns: columnsMapped });\n  }\n  loadConfig() {\n    ConfigStorage.loadGridConfig(this.configName, this.resourceID)\n      .then((config) => {\n      this.setGridConfig(this.normalizeGridConfig(config));\n    })\n      .catch((error) => {\n      console.warn(error);\n    });\n  }\n  addGridLegacyConfigName() {\n    if (this.gridLegacyConfigName && this.configName) {\n      ConfigStorage.addGridLegacyConfig(this.configName, this.gridLegacyConfigName);\n    }\n  }\n  gridConfigChangeHandler(evt) {\n    const config = this.normalizeGridConfig(evt.detail);\n    ConfigStorage.saveGridConfig(config, this.configName, this.resourceID);\n    evt.stopPropagation();\n  }\n  modalConfigChangeHandler(evt) {\n    const config = this.normalizeGridConfig(evt.detail);\n    this._grid.setColumnsState(config.columns)\n      .then(() => {\n      this.setGridConfig(config);\n      this.closeGridConfig();\n      this.dataExporterProviderStore();\n    });\n    evt.stopPropagation();\n  }\n  async dataExporterProviderStore() {\n    const dataExporterProvider = this.strategyExporter === ExporterStrategy.SERVER_SIDE\n      ? new ServerSideExporterProvider(this._dataUnit, this._grid)\n      : new ClientSideExporterProvider(this._dataUnit, this._grid);\n    store.set(\"exporterProviders\", Object.assign(Object.assign({}, store.get(\"exporterProviders\")), { [this.configName]: dataExporterProvider }));\n  }\n  addElementID() {\n    const dataInfo = { dataUnit: this._dataUnit };\n    ElementIDUtils.addIDInfo(this._element, null, dataInfo);\n  }\n  loadGridCustomFormatters(fields) {\n    if (!fields || !this._grid) {\n      return;\n    }\n    fields.forEach((field) => {\n      var _a;\n      if ((_a = field.properties) === null || _a === void 0 ? void 0 : _a.rm_precision) {\n        this.addCustomValueFormatter(field.name, this._rmPrecisionCustomValueFormatter);\n      }\n    });\n  }\n  async interceptMetadataLoaded(action) {\n    this.loadGridCustomFormatters(action.payload.fields);\n    return action;\n  }\n  finishLoading() {\n    this._dataUnit.addInterceptor(this.dataUnitInterceptor);\n    CrudUtils.assertDefaultSorting(this._gridConfig, this._dataUnit);\n    this.addElementID();\n    if (this.columnFilterDataSource != undefined) {\n      this.columnFilterDataSource.setApplication(this._application);\n      this.columnFilterDataSource.setDataUnit(this._dataUnit);\n    }\n  }\n  setCustomRenders() {\n    if (!this._grid) {\n      return;\n    }\n    for (const [fieldName, customRenderProps] of this._customRenders) {\n      this._grid.addGridCustomRender(fieldName, customRenderProps.customRender, customRenderProps.detailContext);\n      this._customRenders.delete(fieldName);\n    }\n  }\n  setCustomEditors() {\n    if (!this._grid) {\n      return;\n    }\n    for (const [fieldName, customEditorProps] of this._customEditors) {\n      this._grid.addCustomEditor(fieldName, customEditorProps.customEditor, customEditorProps.detailContext);\n      this._customEditors.delete(fieldName);\n    }\n  }\n  componentWillLoad() {\n    this._application = ApplicationContext.getContextValue(\"__SNK__APPLICATION__\");\n    //TODO: substituir pelo metodo nativo closest\n    let parent = this._element.parentElement;\n    while (parent) {\n      if (parent.tagName.toUpperCase() === \"SNK-DATA-UNIT\") {\n        this._snkDataUnit = parent;\n        this._dataUnit = this._snkDataUnit.dataUnit;\n        if (!this._dataUnit) {\n          this._snkDataUnit.addEventListener(\"dataUnitReady\", (evt) => {\n            this._dataUnit = evt.detail;\n            this.finishLoading();\n          });\n        }\n        else {\n          this.finishLoading();\n        }\n        if (!this.messagesBuilder)\n          this.messagesBuilder = this._snkDataUnit.messagesBuilder;\n        this._snkDataUnit.addEventListener(\"dataStateChange\", this.handleDataStateChange.bind(this));\n        this._snkDataUnit.addEventListener(\"cancelEdition\", () => {\n          var _a;\n          if ((_a = this._dataState) === null || _a === void 0 ? void 0 : _a.recordsIsEmpty) {\n            this._dataUnit.clearSelection();\n          }\n        });\n        break;\n      }\n      parent = parent.parentElement;\n    }\n    this._rmPrecisionCustomValueFormatter = new RmPrecisionCustomValueFormatter();\n    this.addGridLegacyConfigName();\n    this.loadConfig();\n    this._continuousInsertUtils = new ContinuousInsertUtils(this._application, this.resourceID, this.configName);\n    if (this.enableGridInsert) {\n      this._continuousInsertUtils.getConfig().then(value => this._enableContinuousInsert = value);\n    }\n  }\n  componentDidRender() {\n    var _a, _b;\n    this._rmPrecisionCustomValueFormatter.setGrid(this._grid);\n    this.loadGridCustomFormatters((_b = (_a = this._dataUnit) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.fields);\n    this.setCustomRenders();\n    this.setCustomEditors();\n  }\n  async handleDataStateChange(evt) {\n    this._dataState = evt.detail;\n    this._rmPrecisionCustomValueFormatter.setDataState(this._dataState);\n  }\n  getHeaderDisabledButtons() {\n    var _a;\n    const disabledButtons = [];\n    if ((_a = this._dataState) === null || _a === void 0 ? void 0 : _a.selectionInfo) {\n      if (this._dataState.selectionInfo.length > 1) {\n        disabledButtons.push(TaskbarElement.CLONE, TaskbarElement.ATTACH, TaskbarElement.UPDATE);\n      }\n      if (this._dataState.selectionInfo.isAllRecords()) {\n        disabledButtons.push(TaskbarElement.REMOVE);\n      }\n    }\n    return disabledButtons;\n  }\n  getInvisibleButtons() {\n    var _a, _b;\n    let invisibleButtons = [];\n    if (!this._dataUnit || this._dataUnit.records.length === 0)\n      invisibleButtons.push(TaskbarElement.DATA_EXPORTER);\n    if (((_a = this._dataState) === null || _a === void 0 ? void 0 : _a.selectionInfo.mode) === SelectionMode.ALL_RECORDS)\n      invisibleButtons.push(TaskbarElement.ACTIONS_BUTTON);\n    if (((_b = this._dataState) === null || _b === void 0 ? void 0 : _b.selectionInfo.length) === 1)\n      invisibleButtons.push(TaskbarElement.UPDATE_MULTIPLE);\n    return invisibleButtons;\n  }\n  componentWillRender() {\n    const invisibleButtons = this.getInvisibleButtons();\n    this._headerTaskbarProcessor.process(this.getHeaderTaskbarId(), this.taskbarManager, this._dataState, this.getHeaderDisabledButtons(), invisibleButtons);\n    this._topTaskbarProcessor.process(this.getTopTaskBarId(), this.taskbarManager, this._dataState, undefined, invisibleButtons);\n    this.dataExporterProviderStore();\n  }\n  getHeaderTaskbarId() {\n    var _a, _b;\n    const hasSelectedRecord = this._dataState && !!((_a = this._dataState.selectionInfo) === null || _a === void 0 ? void 0 : _a.length);\n    const taskbarIdPrefixLookup = {\n      primary: this.isDetail ? \"snkGridHeaderTaskbar.detail\" : \"snkGridHeaderTaskbar\",\n      secondary: this.isDetail ? \"snkGridHeaderTaskbar.detail\" : \"snkGridHeaderTaskbar\",\n      singleTaskbar: this.isDetail ? \"snkGridHeaderTaskbar.singleTaskbar.detail\" : \"snkGridHeaderTaskbar.singleTaskbar\"\n    };\n    const taskbarIdPrefix = taskbarIdPrefixLookup[this.presentationMode];\n    let headerTaskbarId = hasSelectedRecord ? `${taskbarIdPrefix}.selected` : `${taskbarIdPrefix}.unselected`;\n    if (((_b = this._dataState) === null || _b === void 0 ? void 0 : _b.isDirty) && this.presentationMode === PresentationMode.SINGLE_TASKBAR) {\n      headerTaskbarId = \"snkGridHeaderTaskbar.singleTaskbar.finish_edition\";\n    }\n    return headerTaskbarId;\n  }\n  getTopTaskBarId() {\n    var _a;\n    const suffixLookup = {\n      primary: \"\",\n      secondary: \".secondary\",\n      singleTaskbar: \".singleTaskbar\"\n    };\n    const sufix = suffixLookup[this.presentationMode];\n    if ((_a = this._dataState) === null || _a === void 0 ? void 0 : _a.isDirty) {\n      return `snkGridTopTaskbar.finish_edition${sufix}`;\n    }\n    return `snkGridTopTaskbar.regular${sufix}`;\n  }\n  getPrimaryButton() {\n    const primaryButtonLookup = {\n      primary: \"INSERT\",\n      secondary: \"\",\n      singleTaskbar: \"INSERT\"\n    };\n    return primaryButtonLookup[this.presentationMode];\n  }\n  getColumnSearch(item) {\n    if (this._columnSearch != undefined) {\n      return this._columnSearch;\n    }\n    this._columnSearch = buildFieldSearch(item, ({ argument }) => new Promise(accept => {\n      this._grid.filterColumns(argument).then((columns) => {\n        accept(columns\n          .filter(column => !column.hidden)\n          .map(column => ({ label: column.label, value: column.name })));\n      });\n    }), (option) => {\n      if (option != undefined) {\n        this._grid.locateColumn(option.value);\n      }\n    });\n    return this._columnSearch;\n  }\n  getActionsList() {\n    const hardList = [];\n    if (this.enableGridInsert) {\n      hardList.push(this._continuousInsertUtils.actionContinuousInsert(this._enableContinuousInsert, () => {\n        this._enableContinuousInsert = !this._enableContinuousInsert;\n        this._continuousInsertUtils.handleSaveConfig(this._enableContinuousInsert);\n      }));\n    }\n    if (this.isGridInsertActive())\n      return hardList;\n    if (this.taskbarManager != undefined && this.taskbarManager.getMoreOptions != undefined) {\n      const taskbarID = this.getTopTaskBarId();\n      return hardList.concat(this.taskbarManager.getMoreOptions(taskbarID, this.configName, this._dataState, this.actionsList));\n    }\n    return hardList.concat(this.actionsList);\n  }\n  getActionsSettingsList() {\n    const hardList = [{\n        value: StringUtils.generateUUID(),\n        label: this.messagesBuilder.getMessage(\"snkGrid.findColumn\", {}),\n        disableCloseOnSelect: true,\n        eagerInitialize: true,\n        itemBuilder: (_, item) => this.getColumnSearch(item)\n      }];\n    return hardList;\n  }\n  handleFilterConfigUpdated(filterConfig) {\n    if (!filterConfig.length) {\n      this._showSnkFilterBar = false;\n      return;\n    }\n    if (filterConfig.length === 1 && filterConfig[0].id === 'PERSONALIZED_FILTER_GROUP') {\n      this._showSnkFilterBar = filterConfig[0].groupedItems.length > 0;\n      return;\n    }\n    this._showSnkFilterBar = true;\n  }\n  getGridHeaderButtons() {\n    if (this.isGridInsertActive())\n      return TaskbarElement.MORE_OPTIONS;\n    return this._headerTaskbarProcessor.buttons;\n  }\n  isGridInsertActive() {\n    return this.enableGridInsert && this._dataUnit.hasNewRecord();\n  }\n  render() {\n    if (!this._dataUnit) {\n      return undefined;\n    }\n    return (h(\"div\", { class: \"snk-grid__container ez-flex ez-flex--column ez-flex-item--auto ez-padding--large ez-box--no-outline\", tabindex: \"0\" }, h(\"div\", { class: \"snk-grid__header ez-margin-bottom--extra-small\" }, this._showSnkFilterBar &&\n      h(Fragment, null, h(\"snk-filter-bar\", { ref: (ref) => this._snkFilterBar = ref, title: this.filterBarTitle, dataUnit: this._dataUnit, \"data-element-id\": \"gridFilter\", class: \"snk-grid__filter-bar ez-align--top\", configName: this.configName, messagesBuilder: this.messagesBuilder, resourceID: this.resourceID, onConfigUpdated: evt => this.handleFilterConfigUpdated(evt.detail), disablePersonalizedFilter: this.disablePersonalizedFilter, filterBarLegacyConfigName: this.filterBarLegacyConfigName, autoLoad: this.autoLoad, enableLockManagerLoadingComp: this.enableLockManagerLoadingComp }), h(\"hr\", { class: \"ez-divider-vertical ez-divider--dark ez-margin-left--medium snk-grid__header-divider\" })), h(\"snk-taskbar\", { class: \"ez-padding-left--medium ez-padding-top--extra-small\", \"data-element-id\": \"grid_top\", key: \"topTaskbar\", configName: this.configName, dataUnit: this._dataUnit, messagesBuilder: this.messagesBuilder, buttons: this._topTaskbarProcessor.buttons, disabledButtons: this._topTaskbarProcessor.disabledButtons, customButtons: this._topTaskbarProcessor.customButtons, primaryButton: this.getPrimaryButton(), resourceID: this.resourceID, customContainerId: this.taskbarCustomContainerId, customSlotId: this.topTaskbarCustomSlotId, overflowStrategy: 'none', actionsSettingsList: this.getActionsSettingsList() }, h(\"slot\", { name: this.topTaskbarCustomSlotId }))), h(\"ez-grid\", { ref: ref => this._grid = ref, class: (this.presentationMode === PresentationMode.SECONDARY ? \"snk-grid-container__without-shadow \" : \"\") + \"snk-grid__table\", \"data-element-id\": \"embedded\", dataUnit: this._dataUnit, key: \"grid-\" + this._snkDataUnit.entityName, config: this._gridConfig, onConfigChange: (evt) => { this.gridConfigChangeHandler(evt); }, onEzDoubleClick: (evt) => this.gridDoubleClick.emit(evt.detail), statusResolver: this.statusResolver, multipleSelection: this.multipleSelection, columnfilterDataSource: this.columnFilterDataSource, selectionToastConfig: this.selectionToastConfig, useEnterLikeTab: this.useEnterLikeTab, recordsValidator: this.recordsValidator, canEdit: this.canEdit, autoFocus: this.autoFocus, enableGridInsert: this.enableGridInsert, enableContinuousInsert: this._enableContinuousInsert, enableLockManagerTaskbarClick: this.enableLockManagerTaskbarClick, enableLockManagerLoadingComp: this.enableLockManagerLoadingComp, outlineMode: this.outlineMode, useSearchColumn: this.useSearchColumn, suppressHorizontalScroll: this.suppressHorizontalScroll, paginationCounterMode: this.paginationCounterMode, suppressCheckboxColumn: this.suppressCheckboxColumn, compact: this.compact }, h(\"snk-taskbar\", { id: 'teste', dataUnit: this._dataUnit, configName: this.configName, messagesBuilder: this.messagesBuilder, \"data-element-id\": \"grid_left\", buttons: this.getGridHeaderButtons(), presentationMode: this.presentationMode, disabledButtons: this._headerTaskbarProcessor.disabledButtons, customButtons: this._headerTaskbarProcessor.customButtons, slot: \"leftButtons\", actionsList: this.getActionsList(), primaryButton: this.getPrimaryButton(), resourceID: this.resourceID, customContainerId: this.taskbarCustomContainerId, customSlotId: this.gridHeaderCustomSlotId, actionsSettingsList: this.getActionsSettingsList() }, h(\"slot\", { name: this.gridHeaderCustomSlotId }))), h(\"div\", { class: \"ez-col ez-col--sd-12 snk-grid-container__footer\" }, h(\"slot\", { name: \"SnkGridFooter\" })), h(\"ez-popup\", { size: \"medium\", heightMode: \"auto\", useHeader: false, opened: this._popUpGridConfig, onEzClosePopup: () => this.closeGridConfig() }, h(\"snk-grid-config\", { ref: ref => this._snkGridConfig = ref, config: this._gridConfig, \"data-element-id\": this._element.getAttribute(ElementIDUtils.DATA_ELEMENT_ID_ATTRIBUTE_NAME), selectedIndex: 0, configName: this.configName, onConfigChange: (evt) => this.modalConfigChangeHandler(evt), onConfigCancel: () => this.closeGridConfig(), resourceID: this.resourceID }))));\n  }\n  get _element() { return getElement(this); }\n  static get watchers() { return {\n    \"gridLegacyConfigName\": [\"handleGridLegacyConfigName\"]\n  }; }\n};\nSnkGrid.style = snkGridCss;\n\nexport { SnkGrid as snk_grid };\n"],"names":["ServerSideExporterProvider","CommonsExporter","_a","_b","_c","total","getSelectedRecordsIDsInfo","paginationInfo","offset","snkGridCss","SnkGrid","hostRef","registerInstance","createEvent","KeyboardManager","TaskbarProcessor","action","Action","SnkMultiSelectionListDataSource","PresentationMode","ExporterStrategy","btns","TaskbarElement","config","fieldName","customEditor","detailContext","newCustomEditors","customRender","newCustomRenders","columnName","customFormatter","event","newEvent","newLegacyConfig","oldLegacyConfig","gridColumns","c","CrudUtils","columnsMapped","column","ConfigStorage","error","evt","dataExporterProvider","ClientSideExporterProvider","store","dataInfo","ElementIDUtils","fields","field","customRenderProps","customEditorProps","ApplicationContext","parent","RmPrecisionCustomValueFormatter","ContinuousInsertUtils","value","disabledButtons","invisibleButtons","SelectionMode","hasSelectedRecord","taskbarIdPrefix","headerTaskbarId","sufix","item","buildFieldSearch","argument","accept","columns","option","hardList","taskbarID","StringUtils","_","filterConfig","h","Fragment","ref","getElement"],"mappings":"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","x_google_ignoreList":[0]}
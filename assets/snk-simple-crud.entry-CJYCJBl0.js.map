{"version":3,"file":"snk-simple-crud.entry-CJYCJBl0.js","sources":["../../node_modules/@sankhyalabs/ezui/dist/collection/utils/CSSVarsUtils.js","../../node_modules/@sankhyalabs/sankhyablocks/dist/esm/snk-simple-crud.entry.js"],"sourcesContent":["export default class CSSVarsUtils {\n  static applyCSSVars(document, host, child) {\n    const isSameDomain = (styleSheet) => {\n      if (!styleSheet.href) {\n        return true;\n      }\n      return styleSheet.href.indexOf(window.location.origin) === 0;\n    };\n    Array.from(document.styleSheets).filter(isSameDomain).forEach((sheet) => {\n      Array.from(sheet.cssRules).filter(rule => rule instanceof CSSStyleRule).forEach((rule) => {\n        Array.from(rule.style).forEach((propName) => {\n          if (propName.startsWith(\"--\")) {\n            CSSVarsUtils.applyIfExists(host, child, propName);\n          }\n        });\n      });\n    });\n  }\n  static applyVarsTextInput(host, child) {\n    if (child) {\n      CSSVarsUtils.applyIfExists(host, child, '--ez-text-input__input--background-color');\n      CSSVarsUtils.applyIfExists(host, child, '--ez-text-input__input--border-color');\n      CSSVarsUtils.applyIfExists(host, child, '--ez-text-input--height');\n      CSSVarsUtils.applyIfExists(host, child, '--ez-text-input__input--disabled--background-color');\n      CSSVarsUtils.applyIfExists(host, child, '--ez-text-input__input--disabled--color');\n      CSSVarsUtils.applyIfExists(host, child, '--ez-text-input--height--slim');\n      CSSVarsUtils.applyIfExists(host, child, '--ez-text-input--border-radius');\n      CSSVarsUtils.applyIfExists(host, child, '--ez-text-input__input--focus--border-color');\n      CSSVarsUtils.applyIfExists(host, child, '--ez-text-input__icon--width');\n      CSSVarsUtils.applyIfExists(host, child, '--ez-text-input__input--focus--icon-color');\n      CSSVarsUtils.applyIfExists(host, child, '--ez-text-input__margin-bottom');\n    }\n  }\n  static applyVarsButton(host, child) {\n    if (child) {\n      [\"--ez-button--min-width\",\n        \"--ez-button--height\",\n        \"--ez-button__icon--width\",\n        \"--ez-button__inline__icon--padding\",\n        \"--ez-button--padding-top\",\n        \"--ez-button--padding-bottom\",\n        \"--ez-button--padding-right\",\n        \"--ez-button--padding-left\",\n        \"--ez-button--color\",\n        \"--ez-button--font-size\",\n        \"--ez-button--font-family\",\n        \"--ez-button--font-weight\",\n        \"--ez-button--background-color\",\n        \"--ez-button--border-radius\",\n        \"--ez-button--border\",\n        \"--ez-button--hover-color\",\n        \"--ez-button--hover--background-color\",\n        \"--ez-button--disabled-color\",\n        \"--ez-button--disabled--background-color\",\n        \"--ez-button--focus--border\",\n        \"--ez-button--focus--box-shadow\",\n        \"--ez-button--active-color\",\n        \"--ez-button--active--background-color\",\n        \"--ez-button--link-color\",\n        \"--ez-button--link--hover-color\",\n        \"--ez-button--link--small--font-size\",\n        \"--ez-button--link--medium--font-size\",\n        \"--ez-button--link--large--font-size\",].forEach(prop => {\n        CSSVarsUtils.applyIfExists(host, child, prop);\n      });\n    }\n  }\n  static applyVarsGrid(host, child) {\n    if (child) {\n      [\n        \"--ez-grid--min-height\",\n        \"--snk-grid-min-height\",\n      ].forEach(prop => {\n        const propValue = getComputedStyle(host).getPropertyValue(prop);\n        if (propValue !== null && propValue !== undefined) {\n          child.style.setProperty(prop, propValue);\n        }\n      });\n    }\n  }\n  static applyIfExists(host, element, varName) {\n    const prop = getComputedStyle(host).getPropertyValue(varName);\n    if (prop) {\n      element.style.setProperty(varName, prop);\n    }\n  }\n}\n","import { r as registerInstance, c as createEvent, h, g as getElement } from './index-479e1293.js';\nimport { StringUtils, ApplicationContext, ObjectUtils, Action, DataType, UserInterface, KeyboardManager, ElementIDUtils } from '@sankhyalabs/core';\nimport { CSSVarsUtils, buildFieldSearch, LABEL_SEARCH_COLUMN, LABEL_SEARCH_FIELD } from '@sankhyalabs/ezui/dist/collection/utils';\nimport { V as VIEW_MODE, S as SIMPLE_CRUD_MODE } from './constants-7b422de0.js';\nimport { T as TaskbarElement } from './taskbar-elements-171476d4.js';\nimport './DataFetcher-db08cad0.js';\nimport './ISave-da565824.js';\nimport { S as SnkMultiSelectionListDataSource, R as RmPrecisionCustomValueFormatter, b as ContinuousInsertUtils, a as CrudUtils, c as ClientSideExporterProvider } from './ClientSideExporterProvider-09dee1a3.js';\nimport { P as PresentationMode } from './index-b40568ff.js';\nimport '@sankhyalabs/ezui/dist/collection/utils/constants';\nimport '@sankhyalabs/core/dist/dataunit/metadata/UnitMetadata';\nimport { I as InMemoryLoader } from './dataunit-fetcher-1b78797a.js';\nimport './filter-item-type.enum-d45e026f.js';\nimport { F as FormConfigFetcher } from './form-config-fetcher-e623539b.js';\nimport { T as TaskbarProcessor } from './taskbar-processor-3436124c.js';\nimport { C as ConfigStorage } from './ConfigStorage-cf578768.js';\nimport { S as SnkFormConfigManager } from './SnkFormConfigManager-c1cd9dcd.js';\nimport { s as store } from './index-b72af127.js';\nimport './PrintUtils-3e4ff0f5.js';\nimport '@sankhyalabs/ezui/dist/collection/components/ez-grid/utils/InMemoryFilterColumnDataSource';\nimport './GetSelectedRecordsIDsInfo-9fa41508.js';\nimport './IFetchDataExporterParams-d73bed3d.js';\nimport '@sankhyalabs/ezui/dist/collection/components/ez-grid/utils';\nimport '@sankhyalabs/core/dist/utils/SortingUtils';\nimport './ResourceIDUtils-a114189a.js';\n\nconst REGULAR_DEFAULT_BTNS = [\"INSERT\", \"REFRESH\", \"PREVIOUS\", \"NEXT\", \"DIVIDER\", \"MORE_OPTIONS\"];\nconst REGULAR_SELECTED_BTNS = [\"INSERT\", \"REFRESH\", \"PREVIOUS\", \"NEXT\", \"DIVIDER\", \"CLONE\", \"REMOVE\", \"DIVIDER\", \"MORE_OPTIONS\"];\n\nconst snkSimpleCrudCss = \".sc-snk-simple-crud-h{display:flex;height:100%;width:100%;--snk-simple-crud-grid--min-height:300px}.simple-crud__container.sc-snk-simple-crud{display:grid;grid-template-rows:auto 1fr;height:100%;width:100%}.simple-crud__container-section.sc-snk-simple-crud{flex-wrap:unset;flex-direction:column}.simple-crud__form--hidden.sc-snk-simple-crud{display:none}ez-grid.sc-snk-simple-crud{--ez-grid__container--shadow:none;--ez-grid__container--shadow--outline:none;--ez-grid--min-height:var(--snk-simple-crud-grid--min-height)}ez-form.sc-snk-simple-crud{min-height:300px}\";\n\nconst SnkSimpleCrud = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.dataStateChange = createEvent(this, \"dataStateChange\", 3);\n    this.dataUnitReady = createEvent(this, \"dataUnitReady\", 3);\n    this.actionClick = createEvent(this, \"actionClick\", 7);\n    this.formItemsReady = createEvent(this, \"formItemsReady\", 7);\n    this.configuratorSave = createEvent(this, \"configuratorSave\", 7);\n    this.configuratorCancel = createEvent(this, \"configuratorCancel\", 7);\n    this._multiSelectionListDataSource = new SnkMultiSelectionListDataSource();\n    this._formConfigFetcher = new FormConfigFetcher();\n    this._customEditors = new Map();\n    this._customRenders = new Map();\n    this._container = undefined;\n    this._showPopUpGridConfig = false;\n    this._currentViewMode = VIEW_MODE.GRID;\n    this._config = undefined;\n    this._fieldToGetFocus = undefined;\n    this._customContainerId = `SNK-SIMPLE-CRUD-CUSTOM-CONTAINER-${StringUtils.generateUUID()}`;\n    this.enableLockManagerLoadingComp = false;\n    this.enableLockManagerTaskbarClick = false;\n    this.dataState = undefined;\n    this.dataUnit = undefined;\n    this.entityName = undefined;\n    this.mode = SIMPLE_CRUD_MODE.SERVER;\n    this.gridConfig = undefined;\n    this.formConfig = undefined;\n    this._formFields = [];\n    this._fieldsProps = new Map();\n    this.enableContinuousInsert = false;\n    this.multipleSelection = undefined;\n    this.useCancelConfirm = true;\n    this.pageSize = 150;\n    this.resourceID = undefined;\n    this.enableGridInsert = false;\n    this.paginationCounterMode = 'auto';\n    this.taskbarManager = undefined;\n    this.messagesBuilder = undefined;\n    this.useEnterLikeTab = false;\n    this.actionsList = undefined;\n    this.configName = undefined;\n    this.showConfiguratorButtons = false;\n    this.gridLegacyConfigName = undefined;\n    this.formLegacyConfigName = undefined;\n    this.ignoreReadOnlyFormFields = false;\n    this.autoFocus = true;\n    this.domainMessagesBuilder = undefined;\n    this.multipleEditionEnabled = true;\n    this.layoutFormConfig = false;\n    this.autoLoad = undefined;\n    this.outlineMode = false;\n  }\n  /**\n   * Registra um editor customizado para campos da grade e formul√°rio.\n   */\n  async addCustomEditor(fieldName, customEditor) {\n    if (this._grid && this._form) {\n      this._grid.addCustomEditor(fieldName, customEditor);\n      this._form.addCustomEditor(fieldName, customEditor);\n      return;\n    }\n    const newCustomEditors = new Map(this._customEditors);\n    newCustomEditors.set(fieldName, customEditor);\n    this._customEditors = newCustomEditors;\n  }\n  /**\n   * Registra um render customizado para colunas da grid.\n   */\n  async addGridCustomRender(fieldName, customRender) {\n    if (this._grid) {\n      this._grid.addGridCustomRender(fieldName, customRender);\n      return;\n    }\n    const newCustomRenders = new Map(this._customRenders);\n    newCustomRenders.set(fieldName, customRender);\n    this._customRenders = newCustomRenders;\n  }\n  async handleResourceIDChanged(newValue, oldValue) {\n    if (StringUtils.isEmpty(newValue)) {\n      return;\n    }\n    if (newValue === oldValue) {\n      return;\n    }\n    await this.loadFormConfig(true);\n    await this.loadGridConfig(true);\n  }\n  /**\n   * Registra um formatador de valores para uma coluna da grid.\n   */\n  async addCustomValueFormatter(columnName, customFormatter) {\n    this._grid.addCustomValueFormatter(columnName, customFormatter);\n  }\n  /**\n   * Remove o formatador de valores de uma coluna da grid.\n   */\n  async removeCustomValueFormatter(columnName) {\n    this._grid.removeCustomValueFormatter(columnName);\n  }\n  /**\n   * Altera/adiciona uma propriedade nos metadados do campo.\n   */\n  async setFieldProp(fieldName, propName, value) {\n    const newCustomFieldProps = new Map(this._fieldsProps);\n    const currentProps = this._fieldsProps.get(fieldName);\n    newCustomFieldProps.set(fieldName, Object.assign(Object.assign({}, currentProps), { [propName]: value }));\n    this._fieldsProps = newCustomFieldProps;\n  }\n  loadTaskbarProcessor() {\n    const taskbarIDs = {};\n    taskbarIDs[TASKBAR_ID.FORM_REGULAR] = this.getButtons(false, [TaskbarElement.GRID_MODE], true);\n    taskbarIDs[TASKBAR_ID.GRID_REGULAR] = this.getButtons(false, [TaskbarElement.DATA_EXPORTER, TaskbarElement.FORM_MODE]);\n    taskbarIDs[TASKBAR_ID.FORM_SELECTED] = this.getButtons(true, [TaskbarElement.GRID_MODE], true);\n    taskbarIDs[TASKBAR_ID.GRID_SELECTED] = this.getGridSelectedButtonsCallBack.bind(this);\n    taskbarIDs[TASKBAR_ID.FINISH_EDITION] = this.getFinishEditionButtonsCallback.bind(this);\n    taskbarIDs[TASKBAR_ID.MULTIPLE_EDITION] = [TaskbarElement.CANCEL];\n    this._taskbarProcessor = new TaskbarProcessor(taskbarIDs);\n  }\n  getGridSelectedButtonsCallBack() {\n    var _a, _b, _c;\n    if (!this.multipleEditionEnabled || ((_c = (_b = (_a = this.dataState) === null || _a === void 0 ? void 0 : _a.selectionInfo) === null || _b === void 0 ? void 0 : _b.records) === null || _c === void 0 ? void 0 : _c.length) === 1) {\n      return this.getButtons(true, [TaskbarElement.DATA_EXPORTER, TaskbarElement.FORM_MODE]);\n    }\n    return this.getButtons(true, [TaskbarElement.UPDATE_MULTIPLE, TaskbarElement.DATA_EXPORTER, TaskbarElement.FORM_MODE]);\n  }\n  getFinishEditionButtonsCallback() {\n    const btns = [TaskbarElement.CANCEL, TaskbarElement.SAVE];\n    if (this.enableGridInsert && this._currentViewMode !== VIEW_MODE.ATTACHMENT) {\n      btns.push(this._currentViewMode === VIEW_MODE.GRID ? TaskbarElement.FORM_MODE : TaskbarElement.GRID_MODE);\n    }\n    return btns;\n  }\n  getButtons(selected, extraButtons, removeRefresh) {\n    let btnList = selected ? REGULAR_SELECTED_BTNS : REGULAR_DEFAULT_BTNS;\n    if (removeRefresh) {\n      btnList = btnList.filter(item => item !== TaskbarElement.REFRESH);\n    }\n    return this.addConfigButton(this.resolveInMemoryBtns(btnList)\n      .concat(extraButtons));\n  }\n  addConfigButton(buttons) {\n    if (this.configName === undefined || (this.configName && this.gridLegacyConfigName)) {\n      return buttons;\n    }\n    return buttons.concat(TaskbarElement.CONFIGURATOR);\n  }\n  get application() {\n    return ApplicationContext.getContextValue(\"__SNK__APPLICATION__\");\n  }\n  resolveInMemoryBtns(taskbarButtons) {\n    const newTaskBarConfig = [...taskbarButtons];\n    if (this.mode === SIMPLE_CRUD_MODE.IN_MEMORY) {\n      newTaskBarConfig.splice(1, 1);\n    }\n    return newTaskBarConfig;\n  }\n  /**\n   * Usado para alternar a vis√£o entre GRID e FORM externamente.\n   */\n  async goToView(view) {\n    this._currentViewMode = view;\n    if (this._viewStack) {\n      if (view === VIEW_MODE.GRID)\n        this.dataUnit.isMultipleEdition = false;\n      this._viewStack.show(view);\n    }\n    if (view === VIEW_MODE.GRID) {\n      requestAnimationFrame(() => this.focusToGrid());\n    }\n    if (view === VIEW_MODE.FORM) {\n      requestAnimationFrame(() => this.focusToForm());\n    }\n  }\n  actionClickListener(evt) {\n    this.handleTaskbarAction(evt.detail);\n    evt.stopPropagation();\n  }\n  handleTaskbarAction(action) {\n    switch (action) {\n      case TaskbarElement.CONFIGURATOR:\n        this._snkConfigurator.open();\n        break;\n      case TaskbarElement.GRID_MODE:\n        this.goToView(VIEW_MODE.GRID);\n        break;\n      case TaskbarElement.FORM_MODE:\n        this.goToView(VIEW_MODE.FORM);\n        break;\n      case TaskbarElement.UPDATE_MULTIPLE:\n        this.dataUnit.isMultipleEdition = true;\n        this.goToView(VIEW_MODE.FORM);\n        break;\n    }\n  }\n  async onChangeEntityName(newValue) {\n    if (this.dataUnit)\n      return;\n    const application = ApplicationContext.getContextValue(\"__SNK__APPLICATION__\");\n    this.dataUnit = await application.getDataUnit(newValue, null, null, this.configName);\n  }\n  onModeChange() {\n    if (this.mode == SIMPLE_CRUD_MODE.IN_MEMORY) {\n      this.initInMemoryDataUnit();\n    }\n  }\n  observeDataState(newValue, oldValue) {\n    this.handleDataStateChange(newValue, oldValue);\n  }\n  async observeFormLegacy(newValue, oldValue) {\n    await this.handleUpdateFormLegacyConfig(newValue, oldValue);\n  }\n  async observeGridLegacy(newValue, oldValue) {\n    await this.handleUpdateGridLegacyConfig(newValue, oldValue);\n  }\n  async handleDataStateChange(newValue, oldValue) {\n    if (ObjectUtils.objectToString(oldValue) != ObjectUtils.objectToString(newValue)) {\n      this.dataStateChange.emit(newValue);\n    }\n    await this.processRmPrecision();\n  }\n  async processRmPrecision() {\n    var _a, _b;\n    const fieldsWithRmPrecision = await this._snkDataUnit.getFieldsWithRmPrecision();\n    for (const field of fieldsWithRmPrecision || []) {\n      if (!field) {\n        continue;\n      }\n      const rmPrecision = (_b = (_a = this.dataState) === null || _a === void 0 ? void 0 : _a.rowMetadata) === null || _b === void 0 ? void 0 : _b.getProp('rm_precision', field);\n      if (!rmPrecision && rmPrecision !== 0) {\n        continue;\n      }\n      await this.setFieldProp(field, 'precision', rmPrecision);\n      await this.setFieldProp(field, 'prettyPrecision', rmPrecision);\n    }\n    this._rmPrecisionCustomValueFormatter.setDataState(this.dataState);\n  }\n  async handleUpdateGridLegacyConfig(newValue, oldValue) {\n    if (newValue == undefined || newValue == oldValue) {\n      return;\n    }\n    if (!this._gridConfigAlreadyLoaded) {\n      return;\n    }\n    await this.loadGridConfig(true);\n  }\n  async handleUpdateFormLegacyConfig(newValue, oldValue) {\n    if (newValue == undefined || newValue == oldValue) {\n      return;\n    }\n    if (!this._formConfigAlreadyLoaded) {\n      return;\n    }\n    await this.loadFormConfig(true);\n  }\n  openConfig(viewMode) {\n    this._snkConfigurator.close();\n    if (viewMode === VIEW_MODE.GRID) {\n      this.openGridConfig();\n    }\n    else if (viewMode === VIEW_MODE.FORM) {\n      this.openFormConfig();\n    }\n  }\n  openGridConfig() {\n    this._grid.getColumnsState()\n      .then((gridColumns) => {\n      this._snkGridConfig.columns = gridColumns.filter(c => c.name);\n      this._snkGridConfig.selectedIndex = 0;\n      this._showPopUpGridConfig = true;\n    });\n  }\n  async openFormConfig() {\n    if (this.formLegacyConfigName || this.configName) {\n      await this._snkSimpleFormConfig.show();\n    }\n  }\n  addGridLegacyConfigName() {\n    if (this.gridLegacyConfigName && this.configName) {\n      ConfigStorage.addGridLegacyConfig(this.configName, this.gridLegacyConfigName);\n    }\n  }\n  loadGridConfig(forceUpdate) {\n    if (this.configName === undefined) {\n      return;\n    }\n    if ((this.gridConfig != undefined || this._gridConfigAlreadyLoaded) && !forceUpdate) {\n      return;\n    }\n    this.addGridLegacyConfigName();\n    this._gridConfigAlreadyLoaded = true;\n    return new Promise((accept, reject) => {\n      ConfigStorage.loadGridConfig(this.configName, this.resolveResourceID())\n        .then(config => {\n        this.setGridConfig(config);\n        accept();\n      })\n        .catch(reason => {\n        reject(reason);\n      });\n    });\n  }\n  formConfigIsLoaded() {\n    return this.formConfig != undefined || this._formConfigAlreadyLoaded;\n  }\n  async loadFormConfig(forceLoad = false, forceSetNewConfig = false) {\n    if (this.configName === undefined) {\n      return;\n    }\n    if (this._formConfigManager == undefined) {\n      this._formConfigManager = new SnkFormConfigManager(this.configName, this.resolveResourceID(), undefined, this.dataUnit);\n      this._formConfigManager.setConfig(this.formConfig);\n    }\n    if (this.formConfigIsLoaded() && !forceLoad) {\n      return;\n    }\n    this._formConfigAlreadyLoaded = true;\n    let loadedLegacyConfig = await this._formConfigFetcher.fetchLegacyConfigurableForm(this.formLegacyConfigName);\n    if (loadedLegacyConfig != undefined) {\n      this._formConfigManager.setConfig(loadedLegacyConfig);\n      this.setFormConfig(loadedLegacyConfig, forceSetNewConfig);\n      return;\n    }\n    this.setFormConfig(await this._formConfigManager.loadConfig());\n  }\n  async componentWillRender() {\n    this.loadTaskbarProcessor();\n    this._resourceID = await this.application.getResourceID();\n    this.dataExporterProviderStore();\n    this.dataExporterProviderStore();\n    this._taskbarProcessor.process(this.getTaskBarId(), this.taskbarManager, this.dataState, this.getTaskBarDisabledButtons());\n    if (this.configName === undefined) {\n      return;\n    }\n    if (this.gridConfig != undefined || this._gridConfigAlreadyLoaded) {\n      return;\n    }\n    await this.addGridLegacyConfigName();\n    await this.loadGridConfig();\n    await this.loadFormConfig();\n  }\n  componentDidRender() {\n    this._rmPrecisionCustomValueFormatter.setGrid(this._grid);\n    this.addGridCustomValueFormattters();\n    this.setFieldsProps();\n    this.setCustomRenders();\n    this.setCustomEditors();\n  }\n  componentWillLoad() {\n    this.processMetadata();\n    this.onModeChange();\n    this.configDatasource();\n    this._rmPrecisionCustomValueFormatter = new RmPrecisionCustomValueFormatter();\n    this._continuousInsertUtils = new ContinuousInsertUtils(this.application, this.resolveResourceID(), this.configName);\n    if (this.enableGridInsert) {\n      this._continuousInsertUtils.getConfig().then(value => this.enableContinuousInsert = value);\n    }\n  }\n  componentDidLoad() {\n    CSSVarsUtils.applyVarsGrid(this._element, this._grid);\n    this.initKeyboardManager();\n    this.dataUnit.subscribe(this.dataUnitActionHandler.bind(this));\n  }\n  async dataUnitActionHandler(action) {\n    if (action.type === Action.EDITION_CANCELED || action.type === Action.DATA_SAVED) {\n      if (this.dataUnit.isMultipleEdition) {\n        this.goToView(VIEW_MODE.GRID);\n      }\n    }\n  }\n  disconnectedCallback() {\n    var _a;\n    (_a = this._keyboardManager) === null || _a === void 0 ? void 0 : _a.unbindAllShortcutKeys();\n  }\n  setCustomRenders() {\n    if (!this._grid) {\n      return;\n    }\n    for (const [fieldName, customRender] of this._customRenders) {\n      this._grid.addGridCustomRender(fieldName, customRender);\n      this._customRenders.delete(fieldName);\n    }\n  }\n  setCustomEditors() {\n    if (!this._grid || !this._form) {\n      return;\n    }\n    for (const [fieldName, customEditor] of this._customEditors) {\n      this._grid.addCustomEditor(fieldName, customEditor);\n      this._form.addCustomEditor(fieldName, customEditor);\n      this._customEditors.delete(fieldName);\n    }\n  }\n  configDatasource() {\n    this._multiSelectionListDataSource.setApplication(this.application);\n    this._multiSelectionListDataSource.setDataUnit(this.dataUnit);\n  }\n  setFieldsProps() {\n    if (!this._form) {\n      return;\n    }\n    for (const [fieldName, props] of this._fieldsProps) {\n      for (const prop in props) {\n        this._form.setFieldProp(fieldName, prop, props[prop]);\n      }\n      this._fieldsProps.delete(fieldName);\n    }\n  }\n  getTaskBarId() {\n    var _a, _b;\n    if ((_a = this.dataState) === null || _a === void 0 ? void 0 : _a.isDirty) {\n      return TASKBAR_ID.FINISH_EDITION;\n    }\n    if (this.dataUnit.isMultipleEdition) {\n      return TASKBAR_ID.MULTIPLE_EDITION;\n    }\n    if (((_b = this.dataState) === null || _b === void 0 ? void 0 : _b.selectionInfo) &&\n      !this.dataState.selectionInfo.isAllRecords() &&\n      this.dataState.selectionInfo.length > 0) {\n      return this._currentViewMode === VIEW_MODE.GRID ? TASKBAR_ID.GRID_SELECTED : TASKBAR_ID.FORM_SELECTED;\n    }\n    return this._currentViewMode === VIEW_MODE.GRID ? TASKBAR_ID.GRID_REGULAR : TASKBAR_ID.FORM_REGULAR;\n  }\n  initInMemoryDataUnit() {\n    this._inMemoryLoader = new InMemoryLoader(this._metadata, undefined, { autoLoad: this.autoLoad });\n    this.dataUnit = this._inMemoryLoader.dataUnit;\n    this.dataUnitReady.emit(this.dataUnit);\n  }\n  setMetadata(metadata) {\n    if (this._inMemoryLoader) {\n      this._inMemoryLoader.metadata = metadata;\n    }\n    else if (this.dataUnit) {\n      this.dataUnit.metadata = metadata;\n    }\n    return Promise.resolve();\n  }\n  setRecords(records) {\n    if (this._inMemoryLoader) {\n      this._inMemoryLoader.records = records;\n    }\n    else if (this.dataUnit) {\n      this.dataUnit.records = records;\n    }\n    return Promise.resolve();\n  }\n  getRecords() {\n    return Promise.resolve(this.dataUnit.records);\n  }\n  /**\n   * Usado para abrir o configurator do CRUD\n   */\n  async openConfigurator() {\n    var _a;\n    (_a = this._snkConfigurator) === null || _a === void 0 ? void 0 : _a.open();\n  }\n  /**\n   * Usado para fechar o configurator do CRUD\n   */\n  async closeConfigurator() {\n    var _a;\n    (_a = this._snkConfigurator) === null || _a === void 0 ? void 0 : _a.close();\n  }\n  async updateConfig() {\n    if (this._formConfigManager == undefined) {\n      this._formConfigManager = new SnkFormConfigManager(this.configName, this.resolveResourceID());\n    }\n    this._formConfigManager.setConfig(this.formConfig);\n  }\n  processMetadata() {\n    const fieldsMetadataElem = this._element.querySelectorAll(\"snk-field-metadata\");\n    const fieldMetadata = [];\n    const formConfig = { fields: [], emptyConfig: false };\n    fieldsMetadataElem.forEach(fieldElem => {\n      const field = {\n        name: fieldElem.getAttribute(\"name\") || fieldElem.getAttribute(\"label\"),\n        label: fieldElem.getAttribute(\"label\"),\n        dataType: DataType[fieldElem.getAttribute(\"dataType\")] || DataType.TEXT,\n        userInterface: UserInterface[fieldElem.getAttribute(\"userInterface\")] || UserInterface.SHORTTEXT,\n        readOnly: fieldElem.getAttribute(\"readOnly\") == \"true\",\n        required: fieldElem.getAttribute(\"required\") == \"true\",\n        tab: fieldElem.getAttribute(\"tab\") || undefined,\n        visible: fieldElem.getAttribute(\"visible\") != \"false\"\n      };\n      const fieldConfig = { name: field.name, tab: field.tab, visible: field.visible };\n      formConfig.fields.push(fieldConfig);\n      fieldMetadata.push(field);\n    });\n    if (fieldMetadata.length > 0) {\n      if (!this.formConfig) {\n        this.formConfig = formConfig;\n      }\n      this._metadata = {\n        name: \"SimpleCrud\",\n        label: \"SimpleCrud\",\n        fields: fieldMetadata\n      };\n    }\n  }\n  addGridCustomValueFormattters() {\n    var _a, _b, _c;\n    const metadataFields = ((_a = this._metadata) === null || _a === void 0 ? void 0 : _a.fields) || ((_c = (_b = this.dataUnit) === null || _b === void 0 ? void 0 : _b.metadata) === null || _c === void 0 ? void 0 : _c.fields);\n    if (!metadataFields) {\n      return;\n    }\n    const fieldsWithRmPrecision = [];\n    metadataFields.forEach((field) => {\n      var _a;\n      if (((_a = field.properties) === null || _a === void 0 ? void 0 : _a.rm_precision) && !fieldsWithRmPrecision.includes(field.name)) {\n        fieldsWithRmPrecision.push(field.name);\n      }\n    });\n    fieldsWithRmPrecision.forEach(field => {\n      this.addCustomValueFormatter(field, this._rmPrecisionCustomValueFormatter);\n    });\n  }\n  onDataStateChange(evt) {\n    this.dataState = Object.assign({}, evt.detail);\n  }\n  getTaskBarDisabledButtons() {\n    var _a, _b, _c, _d, _e, _f;\n    const disabledButtons = [];\n    if (!((_a = this.dataState) === null || _a === void 0 ? void 0 : _a.hasNext)) {\n      disabledButtons.push(TaskbarElement.NEXT);\n    }\n    if (!((_b = this.dataState) === null || _b === void 0 ? void 0 : _b.hasPrevious)) {\n      disabledButtons.push(TaskbarElement.PREVIOUS);\n    }\n    if ((_d = (_c = this.dataState) === null || _c === void 0 ? void 0 : _c.selectionInfo) === null || _d === void 0 ? void 0 : _d.isEmpty()) {\n      disabledButtons.push(TaskbarElement.FORM_MODE);\n    }\n    if (((_f = (_e = this.dataState) === null || _e === void 0 ? void 0 : _e.selectionInfo) === null || _f === void 0 ? void 0 : _f.length) > 1) {\n      disabledButtons.push(TaskbarElement.CLONE);\n    }\n    return disabledButtons;\n  }\n  handleCancelEdit() {\n    var _a;\n    if ((_a = this.dataState) === null || _a === void 0 ? void 0 : _a.recordsIsEmpty) {\n      this.goToView(VIEW_MODE.GRID);\n      this.dataUnit.clearSelection();\n    }\n  }\n  handleConfiguratorEvent(evt, type) {\n    evt.stopImmediatePropagation();\n    if (type === 'SAVE') {\n      this.configuratorSave.emit();\n      return;\n    }\n    this.configuratorCancel.emit();\n  }\n  onSelectField(option) {\n    if (option == undefined) {\n      return;\n    }\n    this._fieldToGetFocus = option.value;\n  }\n  getFieldSearch(splitButton, item) {\n    if (this._fieldSearch != undefined) {\n      return this._fieldSearch;\n    }\n    this._splitButtonForm = splitButton;\n    this._fieldSearch = buildFieldSearch(item, ({ argument }) => this.fieldsOptionLoader(argument), (option) => this.onSelectField(option));\n    return this._fieldSearch;\n  }\n  getFormFields() {\n    var _a, _b;\n    return (_b = (_a = this.formConfig) === null || _a === void 0 ? void 0 : _a.fields) !== null && _b !== void 0 ? _b : this._formFields;\n  }\n  handleFormSetFields(fields) {\n    if (!ObjectUtils.equals(this._formFields, fields)) {\n      this._formFields = fields !== null && fields !== void 0 ? fields : [];\n    }\n  }\n  fieldsOptionLoader(argument) {\n    const searchTerm = argument === null || argument === void 0 ? void 0 : argument.toLowerCase();\n    const allFields = this.getFormFields().map(field => { var _a; return (_a = this.dataUnit) === null || _a === void 0 ? void 0 : _a.getField(field.name); });\n    const filteredFields = allFields.filter(field => {\n      var _a, _b;\n      return ((_a = field.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(searchTerm)) ||\n        ((_b = field.label) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes(searchTerm));\n    });\n    const options = filteredFields.map(field => ({ value: field.name, label: field.label }));\n    return Promise.resolve(options);\n  }\n  isGridInsertActive() {\n    return this.enableGridInsert && this.dataUnit.hasNewRecord();\n  }\n  getColumnSearch(splitButton, item) {\n    if (this._columnSearch != undefined) {\n      return this._columnSearch;\n    }\n    this._splitButton = splitButton;\n    this._columnSearch = buildFieldSearch(item, ({ argument }) => new Promise(accept => {\n      this._grid.filterColumns(argument).then((columns) => {\n        accept(columns\n          .filter(column => !column.hidden)\n          .map(column => ({ label: column.label, value: column.name })));\n      });\n    }), (option) => {\n      if (option != undefined) {\n        this._grid.locateColumn(option.value);\n      }\n    });\n    return this._columnSearch;\n  }\n  getActionsList() {\n    const hardList = [];\n    if (this.enableGridInsert) {\n      hardList.push(this._continuousInsertUtils.actionContinuousInsert(this.enableContinuousInsert, () => {\n        this.enableContinuousInsert = !this.enableContinuousInsert;\n        this._continuousInsertUtils.handleSaveConfig(this.enableContinuousInsert);\n      }));\n    }\n    if (this.isGridInsertActive())\n      return hardList;\n    if (this.taskbarManager != undefined && this.taskbarManager.getMoreOptions != undefined) {\n      const taskbarID = this.getTopTaskBarId();\n      return hardList.concat(this.taskbarManager.getMoreOptions(taskbarID, this.configName, this.dataState, this.actionsList));\n    }\n    return hardList.concat(this.actionsList);\n  }\n  getSettingsListGrid() {\n    var _a, _b;\n    const hardList = [{\n        value: StringUtils.generateUUID(),\n        label: (_b = (_a = this.messagesBuilder) === null || _a === void 0 ? void 0 : _a.getMessage(\"snkSimpleCrud.findColumn\", {})) !== null && _b !== void 0 ? _b : LABEL_SEARCH_COLUMN,\n        disableCloseOnSelect: true,\n        eagerInitialize: true,\n        itemBuilder: (splitButton, item) => this.getColumnSearch(splitButton, item)\n      }];\n    return hardList;\n  }\n  getSettingsListForm() {\n    var _a, _b;\n    const hardList = [{\n        value: StringUtils.generateUUID(),\n        label: (_b = (_a = this.messagesBuilder) === null || _a === void 0 ? void 0 : _a.getMessage(\"snkSimpleCrud.findFields\", {})) !== null && _b !== void 0 ? _b : LABEL_SEARCH_FIELD,\n        disableCloseOnSelect: true,\n        eagerInitialize: true,\n        itemBuilder: (splitButton, item) => this.getFieldSearch(splitButton, item)\n      }];\n    return hardList;\n  }\n  getTopTaskBarId() {\n    var _a;\n    return ((_a = this.dataState) === null || _a === void 0 ? void 0 : _a.isDirty) ? `snkGridTopTaskbar.finish_edition${PresentationMode.PRIMARY}` :\n      `snkGridTopTaskbar.regular${PresentationMode.PRIMARY}`;\n  }\n  clearFieldToFocusHandler() {\n    this._fieldToGetFocus = undefined;\n  }\n  gridConfigChangeHandler(evt) {\n    evt.stopPropagation();\n    if (!this.configName)\n      return;\n    const config = evt.detail;\n    ConfigStorage.saveGridConfig(config, this.configName, this.resolveResourceID());\n  }\n  modalConfigChangeHandler(evt) {\n    const config = evt.detail;\n    this._grid.setColumnsState(config.columns)\n      .then(() => {\n      this.setGridConfig(config);\n      this.closeGridConfig();\n      this.dataExporterProviderStore();\n    });\n    evt.stopPropagation();\n  }\n  async dataExporterProviderStore() {\n    if (this.dataUnit == undefined) {\n      return;\n    }\n    if (this._grid == undefined) {\n      return;\n    }\n    const dataExporterProvider = new ClientSideExporterProvider(this.dataUnit, this._grid);\n    store.set(\"exporterProviders\", Object.assign(Object.assign({}, store.get(\"exporterProviders\")), { [this.getDataExporterStoreKey()]: dataExporterProvider }));\n  }\n  getDataExporterStoreKey() {\n    return `SnkSimpleCrudDataExporter:${this.configName == undefined ? this.dataUnit.name : this.configName}`;\n  }\n  setGridConfig(config) {\n    this.gridConfig = config;\n    CrudUtils.assertDefaultSorting(this.gridConfig, this.dataUnit);\n  }\n  setFormConfig(config, forceUpdate) {\n    if (this.formConfig && !forceUpdate)\n      return;\n    this.formConfig = config;\n  }\n  closeGridConfig() {\n    this._showPopUpGridConfig = false;\n  }\n  getPageSize() {\n    if (this.mode === SIMPLE_CRUD_MODE.IN_MEMORY) {\n      return 0;\n    }\n    if (this.pageSize == undefined) {\n      return 150;\n    }\n    return this.pageSize;\n  }\n  resolveResourceID() {\n    return StringUtils.isEmpty(this.resourceID) ? this._resourceID : this.resourceID;\n  }\n  getFormConfig() {\n    var _a;\n    const configFromManager = (_a = this._formConfigManager) === null || _a === void 0 ? void 0 : _a.getConfig(this.dataUnit, this.ignoreReadOnlyFormFields);\n    if (!this.configName && !configFromManager) {\n      return this.formConfig;\n    }\n    return configFromManager;\n  }\n  updateFormConfig() {\n    let newConfig = this.formConfig;\n    if (this.formLegacyConfigName == undefined) {\n      newConfig = Object.assign(Object.assign({}, this.formConfig), { fields: this.dataUnit.metadata.fields });\n    }\n    this.setFormConfig(newConfig, true);\n    if (this._formConfigManager == undefined) {\n      this._formConfigManager = new SnkFormConfigManager(this.configName, this.resolveResourceID());\n    }\n    this._formConfigManager.setConfig(this.formConfig);\n  }\n  handleDataUnitOnInsertionMode() {\n    if (this.enableGridInsert)\n      return;\n    this.goToView(VIEW_MODE.FORM);\n  }\n  async initKeyboardManager() {\n    var _a;\n    this._keyboardManager = new KeyboardManager({ propagate: false, element: this._element });\n    const dataUnit = this.dataUnit || await ((_a = this._snkDataUnit) === null || _a === void 0 ? void 0 : _a.getDataUnit());\n    if (dataUnit == undefined) {\n      return;\n    }\n    this._keyboardManager\n      .bind(\"F7\", () => dataUnit.saveData(), { description: \"Salva os dados.\", element: this._element })\n      .bind(\"F8\", dataUnit.addRecord.bind(dataUnit), { description: \"Adiciona um novo registro.\", element: this._element })\n      .bind(\"F9\", dataUnit.removeSelectedRecords.bind(dataUnit), { description: \"Remove o registro selecionado.\", element: this._element })\n      .bind(\"Escape\", () => {\n      if (dataUnit.isDirty()) {\n        dataUnit.cancelEdition();\n      }\n    }, {\n      debounceTime: 1000,\n      description: \"Cancela uma a√ß√£o.\", element: this._element\n    });\n  }\n  async handleFormConfigSaved() {\n    await this.loadFormConfig(true, true);\n  }\n  focusToGrid() {\n    const gridElement = this._grid;\n    gridElement.focus();\n  }\n  focusToForm() {\n    const formElement = this._form;\n    formElement.focus();\n  }\n  renderTaskbarContent(layout) {\n    var _a;\n    return (h(\"snk-taskbar\", { class: `ez-box--no-outline ez-box ${this._currentViewMode === VIEW_MODE.FORM ? (this.outlineMode ? 'ez-box--outline' : 'ez-box--shadow-xsmall') + ' ez-padding--small' : ''}`, dataUnit: this.dataUnit, primaryButton: ((_a = this.dataState) === null || _a === void 0 ? void 0 : _a.isDirty) ? \"SAVE\" : \"INSERT\", \"data-element-id\": \"grid_left\", messagesBuilder: this.messagesBuilder, buttons: this._taskbarProcessor.buttons, actionsList: this.getActionsList(), actionsSettingsList: layout === VIEW_MODE.GRID ? this.getSettingsListGrid() : this.getSettingsListForm(), disabledButtons: this._taskbarProcessor.disabledButtons, customButtons: this._taskbarProcessor.customButtons, \"data-exporter-store-key\": this.getDataExporterStoreKey(), slot: \"leftButtons\", presentationMode: PresentationMode.SECONDARY, tabindex: \"0\" }, h(\"slot\", { name: \"TASKBAR_CUSTOM_ELEMENTS\" })));\n  }\n  /* istanbul ignore next */\n  render() {\n    var _a;\n    if (this.dataUnit == undefined) {\n      return;\n    }\n    return (h(\"snk-data-unit\", { ref: ref => this._snkDataUnit = ref, class: \"simple-crud__container\", dataUnit: this.dataUnit, useCancelConfirm: this.useCancelConfirm, onDataStateChange: evt => this.onDataStateChange(evt), onCancelEdition: this.handleCancelEdit.bind(this), pageSize: this.getPageSize(), onInsertionMode: this.handleDataUnitOnInsertionMode.bind(this), onDataUnitReady: (evt) => this.dataUnitReady.emit(evt.detail), onMessagesBuilderUpdated: evt => this.messagesBuilder = evt.detail, onDataUnitFieldsHidded: this.updateFormConfig.bind(this), domainMessagesBuilder: this.domainMessagesBuilder }, h(\"header\", null, h(\"slot\", { name: \"snkSimpleCrudHeader\" })), h(\"section\", { class: `ez-box ez-box--no-outline ${this.outlineMode ? 'ez-box--outline' : 'ez-box--shadow'} simple-crud__container-section`, ref: (ref) => this._container = ref, tabindex: \"0\" }, h(\"ez-view-stack\", { ref: (ref) => this._viewStack = ref, \"data-element-id\": \"simple-crud\" }, h(\"stack-item\", null, h(\"ez-grid\", { class: \"ez-margin-bottom--large ez-box--no-outline\", ref: ref => this._grid = ref, dataUnit: this.dataUnit, config: this.gridConfig, \"no-header\": true, multipleSelection: this.multipleSelection, onEzDoubleClick: () => this.goToView(VIEW_MODE.FORM), onConfigChange: evt => this.gridConfigChangeHandler(evt), columnfilterDataSource: this.dataUnit.name && this.dataUnit.name.includes(InMemoryLoader.IN_MEMORY_DATA_UNIT_NAME)\n        ? undefined\n        : this._multiSelectionListDataSource, useEnterLikeTab: this.useEnterLikeTab, autoFocus: this.autoFocus, enableGridInsert: this.enableGridInsert, enableContinuousInsert: this.enableContinuousInsert, enableLockManagerTaskbarClick: this.enableLockManagerTaskbarClick, enableLockManagerLoadingComp: this.enableLockManagerLoadingComp, outlineMode: this.outlineMode, tabindex: \"0\", paginationCounterMode: this.paginationCounterMode }, this.renderTaskbarContent(VIEW_MODE.GRID), h(\"div\", { slot: \"footer\" }, h(\"slot\", { name: \"snkSimpleCrudFooter\" })))), h(\"stack-item\", null, this.renderTaskbarContent(VIEW_MODE.FORM), h(\"ez-form\", { ref: (ref) => this._form = ref, class: `ez-margin-top--large  ez-box--no-outline`, dataUnit: this.dataUnit, config: this.getFormConfig(), fieldToFocus: this._fieldToGetFocus, onEzFormSetFields: (evt) => this.handleFormSetFields(evt.detail), onEzFormRequestClearFieldToFocus: this.clearFieldToFocusHandler.bind(this), elementFocusSearchField: this._container, tabindex: \"0\" }), h(\"snk-simple-form-config\", { ref: (ref) => this._snkSimpleFormConfig = ref, dataUnit: this.dataUnit, onSnkConfigSaved: this.handleFormConfigSaved.bind(this), configName: (_a = this.formLegacyConfigName) !== null && _a !== void 0 ? _a : this.configName })), this.messagesBuilder && h(\"snk-configurator\", { ref: (ref) => this._snkConfigurator = ref, viewMode: this._currentViewMode, messagesBuilder: this.messagesBuilder, onConfigSelected: (evt) => this.goToView(evt.detail), onOpenConfig: (evt) => this.openConfig(evt.detail), showActionButtons: this.showConfiguratorButtons, onSave: evt => this.handleConfiguratorEvent(evt, 'SAVE'), onCancel: evt => this.handleConfiguratorEvent(evt, 'CANCEL'), resourceID: this.resolveResourceID(), customContainerId: this._customContainerId, layoutFormConfig: this.layoutFormConfig })), h(\"div\", { id: `${this._customContainerId}` }, h(\"slot\", { name: \"SnkConfigContainerSlot\" }))), h(\"ez-popup\", { size: \"medium\", heightMode: \"auto\", useHeader: false, opened: this._showPopUpGridConfig, onEzClosePopup: () => this.closeGridConfig() }, h(\"snk-grid-config\", { ref: ref => this._snkGridConfig = ref, config: this.gridConfig, \"data-element-id\": this._element.getAttribute(ElementIDUtils.DATA_ELEMENT_ID_ATTRIBUTE_NAME), selectedIndex: 0, configName: this.configName, onConfigChange: (evt) => this.modalConfigChangeHandler(evt), onConfigCancel: () => this.closeGridConfig(), resourceID: this.resolveResourceID() }))));\n  }\n  get _element() { return getElement(this); }\n  static get watchers() { return {\n    \"resourceID\": [\"handleResourceIDChanged\"],\n    \"entityName\": [\"onChangeEntityName\"],\n    \"mode\": [\"onModeChange\"],\n    \"dataState\": [\"observeDataState\"],\n    \"formLegacyConfigName\": [\"observeFormLegacy\"],\n    \"gridLegacyConfigName\": [\"observeGridLegacy\"]\n  }; }\n};\nvar TASKBAR_ID;\n(function (TASKBAR_ID) {\n  TASKBAR_ID[\"FORM_REGULAR\"] = \"snkSimpleCrudTaskbar.form_regular\";\n  TASKBAR_ID[\"GRID_REGULAR\"] = \"snkSimpleCrudTaskbar.grid_regular\";\n  TASKBAR_ID[\"FORM_SELECTED\"] = \"snkSimpleCrudTaskbar.form_selected\";\n  TASKBAR_ID[\"GRID_SELECTED\"] = \"snkSimpleCrudTaskbar.grid_selected\";\n  TASKBAR_ID[\"FINISH_EDITION\"] = \"snkSimpleCrudTaskbar.finish_edition\";\n  TASKBAR_ID[\"MULTIPLE_EDITION\"] = \"snkSimpleCrudTaskbar.multiple_edition\";\n})(TASKBAR_ID || (TASKBAR_ID = {}));\nSnkSimpleCrud.style = snkSimpleCrudCss;\n\nexport { SnkSimpleCrud as snk_simple_crud };\n"],"names":["CSSVarsUtils","document","host","child","isSameDomain","styleSheet","sheet","rule","propName","prop","propValue","element","varName","REGULAR_DEFAULT_BTNS","REGULAR_SELECTED_BTNS","snkSimpleCrudCss","SnkSimpleCrud","hostRef","registerInstance","createEvent","SnkMultiSelectionListDataSource","FormConfigFetcher","VIEW_MODE","StringUtils","SIMPLE_CRUD_MODE","fieldName","customEditor","newCustomEditors","customRender","newCustomRenders","newValue","oldValue","columnName","customFormatter","value","newCustomFieldProps","currentProps","taskbarIDs","TASKBAR_ID","TaskbarElement","TaskbarProcessor","_a","_b","_c","btns","selected","extraButtons","removeRefresh","btnList","item","buttons","ApplicationContext","taskbarButtons","newTaskBarConfig","view","evt","action","application","ObjectUtils","fieldsWithRmPrecision","field","rmPrecision","viewMode","gridColumns","c","ConfigStorage","forceUpdate","accept","reject","config","reason","forceLoad","forceSetNewConfig","SnkFormConfigManager","loadedLegacyConfig","RmPrecisionCustomValueFormatter","ContinuousInsertUtils","Action","props","InMemoryLoader","metadata","records","fieldsMetadataElem","fieldMetadata","formConfig","fieldElem","DataType","UserInterface","fieldConfig","metadataFields","_d","_e","_f","disabledButtons","type","option","splitButton","buildFieldSearch","argument","fields","searchTerm","options","columns","column","hardList","taskbarID","LABEL_SEARCH_COLUMN","LABEL_SEARCH_FIELD","PresentationMode","dataExporterProvider","ClientSideExporterProvider","store","CrudUtils","configFromManager","newConfig","KeyboardManager","dataUnit","layout","h","ref","ElementIDUtils","getElement"],"mappings":"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","x_google_ignoreList":[0,1]}
{"version":3,"file":"snk-taskbar.entry-JIX19wZ2.js","sources":["../../node_modules/@sankhyalabs/sankhyablocks/dist/esm/snk-taskbar.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-479e1293.js';\nimport { Action, LockManager, LockManagerOperation, SilentException, StringUtils, ApplicationContext, OVERFLOWED_CLASS_NAME, OverflowWatcher, OverflowDirection, ElementIDUtils } from '@sankhyalabs/core';\nimport { A as AuthorizationConfig } from './AuthorizationConfig-dcbd207a.js';\nimport { T as TaskbarElement, V as VisibleWhenForbidden, A as AuthorizationElements, b as buildElem, a as buildCustomButton } from './taskbar-elements-171476d4.js';\nimport { P as PresentationMode } from './index-b40568ff.js';\nimport './index-b72af127.js';\n\nconst snkTaskbarCss = \".sc-snk-taskbar-h{display:flex;flex-wrap:wrap}.no-wrap.sc-snk-taskbar-h{flex-wrap:nowrap}.full-width.sc-snk-taskbar-h{width:100%}.align-right.sc-snk-taskbar-h{justify-content:flex-end}.overflowed.sc-snk-taskbar{display:none}\";\n\nconst SnkTaskbar = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.actionClick = createEvent(this, \"actionClick\", 7);\n    this.taskbarSaveLocker = createEvent(this, \"taskbarSaveLocker\", 7);\n    this.taskbarSaveUnlocker = createEvent(this, \"taskbarSaveUnlocker\", 7);\n    this.TASKBAR_ITEM_ID_PREFIX = 'TASKBAR_ITEM_';\n    this.TASKBAR_CUSTOM_ELEMENTS_CONTAINER_CLASS_NAME = 'taskbar-custom-elements-container';\n    this.ACTIONS_BUTTON_TAG = 'TASKBAR-ACTIONS-BUTTON';\n    this.NOT_OVERFLOW_ELEMENTS = [\"moreOptions\", \"dataExporter_snkDataExporter\", \"actionsButton_snkActionsButton\"];\n    this.TASKBAR_CUSTOM_ELEMENTS = 'taskbar-custom-elements-container';\n    this._titleKeyByElement = {\n      [TaskbarElement.UPDATE_MULTIPLE]: \"snkTaskbar.titleUpdateMultiple\",\n      [TaskbarElement.UPDATE]: \"snkTaskbar.titleUpdate\",\n      [TaskbarElement.PREVIOUS]: \"snkTaskbar.titlePrevious\",\n      [TaskbarElement.NEXT]: \"snkTaskbar.titleNext\",\n      [TaskbarElement.REFRESH]: \"snkTaskbar.titleRefresh\",\n      [TaskbarElement.CLONE]: \"snkTaskbar.titleClone\",\n      [TaskbarElement.REMOVE]: \"snkTaskbar.titleRemove\",\n      [TaskbarElement.MORE_OPTIONS]: \"snkTaskbar.titleMoreOptions\",\n      [TaskbarElement.INSERT]: \"snkTaskbar.titleInsert\",\n      [TaskbarElement.CANCEL]: \"snkTaskbar.titleCancel\",\n      [TaskbarElement.SAVE]: \"snkTaskbar.titleSave\",\n      [TaskbarElement.GRID_MODE]: \"snkTaskbar.titleGridMode\",\n      [TaskbarElement.FORM_MODE]: \"snkTaskbar.titleFormMode\",\n      [TaskbarElement.CONFIGURATOR]: \"snkTaskbar.titleConfigurator\",\n      [TaskbarElement.ATTACH]: \"snkTaskbar.titleAttach\",\n    };\n    this.onSaveEvent = (action) => {\n      switch (action.type) {\n        case Action.FIELD_INVALIDATED:\n        case Action.INVALIDATE_CLEAN:\n        case Action.DATA_SAVED:\n        case Action.SAVING_ERROR:\n        case Action.SAVING_CANCELED:\n          this._isWaitingForSave = false;\n          break;\n        case Action.SAVING_DATA:\n          this._isWaitingForSave = true;\n          break;\n      }\n    };\n    this._permissions = undefined;\n    this._overFlowedElements = [];\n    this._customElements = undefined;\n    this._customElementsId = undefined;\n    this._slotContainer = undefined;\n    this._hiddenActionsList = [];\n    this._lastWidth = undefined;\n    this._hasToUpdateOverFlow = false;\n    this._isWaitingForSave = false;\n    this.alignRigth = false;\n    this.customSlotId = \"TASKBAR_CUSTOM_ELEMENTS\";\n    this.customContainerId = undefined;\n    this.overflowStrategy = 'hiddenItems';\n    this.configName = undefined;\n    this.resourceID = undefined;\n    this.buttons = undefined;\n    this.customButtons = undefined;\n    this.actionsList = undefined;\n    this.actionsSettingsList = undefined;\n    this.primaryButton = undefined;\n    this.disabledButtons = undefined;\n    this.dataUnit = undefined;\n    this.presentationMode = PresentationMode.PRIMARY;\n    this.messagesBuilder = undefined;\n  }\n  handleCustomSlotElementsLoaded(event) {\n    if (this.hasToSearchCustomElements(event)) {\n      this.getCustomElements(true);\n    }\n  }\n  handleTaskbarSaveLocker() {\n    if (this._isWaitingForSave !== true) {\n      this._isWaitingForSave = true;\n    }\n  }\n  handleTaskbarSaveUnlocker() {\n    if (this._isWaitingForSave === true) {\n      this._isWaitingForSave = false;\n    }\n  }\n  hasToSearchCustomElements(event) {\n    return this.customSlotId === event.detail && !this._slotContainer;\n  }\n  observeButtons() {\n    this._definitions = undefined;\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => { var _a; return (_a = this._overFlowWatcher) === null || _a === void 0 ? void 0 : _a.forceUpdate(); });\n    });\n  }\n  observeDisabledButtons() {\n    var _a;\n    (_a = this._overFlowWatcher) === null || _a === void 0 ? void 0 : _a.forceUpdate();\n  }\n  observeLastWidth(newValue, oldValue) {\n    if (oldValue === 0 && newValue !== 0) {\n      this._hasToUpdateOverFlow = true;\n    }\n  }\n  observeIsWaitingForSave(newValue, oldValue) {\n    if (newValue == true && oldValue == false) {\n      this.taskbarSaveLocker.emit();\n    }\n    if (newValue == false && oldValue == true) {\n      this.taskbarSaveUnlocker.emit();\n    }\n  }\n  // Internal methods\n  elementsFromString(strButtons) {\n    const elements = [];\n    if (strButtons == null)\n      return elements;\n    strButtons.split(\",\").forEach(buttonName => {\n      buttonName = buttonName.trim();\n      if (VisibleWhenForbidden[buttonName] || this.isAllowed(buttonName)) {\n        elements.push(buttonName.trim());\n      }\n    });\n    return elements;\n  }\n  isAllowed(buttonName) {\n    if (buttonName === AuthorizationElements.CONFIGURATOR) {\n      return this._permissions\n        ? this._permissions.isSup\n          || this._permissions[AuthorizationConfig.CONFIG_GRID]\n          || this._permissions[AuthorizationConfig.CONFIG]\n        : false;\n    }\n    if (AuthorizationElements[buttonName]) {\n      return this._permissions ? this._permissions.isSup || this._permissions[buttonName] : false;\n    }\n    return true;\n  }\n  /**\n   * Conforme mecanismo de mensagens, é possível customizar as mensagens dos blocos de construção\n   * através de um pequeno modulo na estrutura da aplicação:\n   * - Criar um arquivo no seguinte caminho: /messages/appmessages.msg.js.\n   * Para conhecer os detalhes do módulo, vide o arquivo neste projeto \"/src/lib/message/resources/snk-taskbar.msg.ts\"\n   */\n  getTitle(element) {\n    var _a;\n    let key;\n    if (this.isAllowed(element)) {\n      key = this._titleKeyByElement[element];\n    }\n    else {\n      key = \"snkTaskbar.forbidden\";\n    }\n    return key ? (_a = this.messagesBuilder) === null || _a === void 0 ? void 0 : _a.getMessage(key, {}) : \"\";\n  }\n  elementClick(elem) {\n    LockManager.whenResolve(this._element, LockManagerOperation.TASKBAR_CLICK).then(() => {\n      if (this.dataUnit) {\n        switch (elem) {\n          case TaskbarElement.PREVIOUS:\n            this.dataUnit.previousRecord();\n            break;\n          case TaskbarElement.NEXT:\n            this.dataUnit.nextRecord();\n            break;\n          case TaskbarElement.REFRESH:\n            this.dataUnit.loadData();\n            break;\n          case TaskbarElement.CLONE:\n            this.dataUnit.copySelected();\n            break;\n          case TaskbarElement.REMOVE:\n            this.dataUnit.removeSelectedRecords();\n            break;\n          case TaskbarElement.INSERT:\n            this.dataUnit.addRecord();\n            break;\n          case TaskbarElement.CANCEL:\n            this.dataUnit.cancelEdition();\n            break;\n          case TaskbarElement.SAVE:\n            if (!this._isWaitingForSave) {\n              this._isWaitingForSave = true;\n              this.dataUnit.saveData().catch((err) => {\n                if (err instanceof SilentException) {\n                  return;\n                }\n                else {\n                  throw err;\n                }\n              }).finally(() => {\n                this._isWaitingForSave = false;\n              });\n            }\n            break;\n        }\n      }\n      if (this.isEnabled(elem))\n        this.actionClick.emit(elem);\n    });\n  }\n  isEnabled(elem) {\n    if (!this.isAllowed(elem)) {\n      return false;\n    }\n    return !(this.disabledButtons && this.disabledButtons.includes(elem));\n  }\n  validatePresentationMode() {\n    if (Object.values(PresentationMode).includes(this.presentationMode)) {\n      return;\n    }\n    this.presentationMode = PresentationMode.PRIMARY;\n  }\n  getElement(index, def) {\n    let className = def === this.primaryButton ? \"ez-button--primary \" : \"\";\n    if (index > 1) {\n      className += \"ez-padding-left--medium\";\n    }\n    const taskbarElement = TaskbarElement[def.toString()];\n    const dataExporterStoreKey = this._element.dataset.exporterStoreKey || this.configName;\n    if (taskbarElement) {\n      return buildElem(def, className, this.getIdElemBtnNative(def), elem => this.getTitle(elem), elem => this.elementClick(elem), elem => this.isEnabled(elem), def !== TaskbarElement.CONFIGURATOR ? this.buildDynamicActionsList() : this.buildActionsSettingsList(), dataExporterStoreKey, this.presentationMode);\n    }\n    else {\n      return buildCustomButton(def, className, this.getIdElemBtnCustom(def), elem => this.elementClick(elem), elem => this.isEnabled(elem));\n    }\n  }\n  buildDynamicActionsList() {\n    var _a;\n    if (this._hiddenActionsList.length) {\n      return [...((_a = this.actionsList) !== null && _a !== void 0 ? _a : []), ...this._hiddenActionsList];\n    }\n    return this.actionsList;\n  }\n  buildActionsSettingsList() {\n    return this.actionsSettingsList;\n  }\n  getIdElemBtnNative(taskbarElem) {\n    return StringUtils.toCamelCase(taskbarElem);\n  }\n  getIdElemBtnCustom(btnCustom) {\n    return StringUtils.toCamelCase(btnCustom.name);\n  }\n  isDivider(element) {\n    var _a;\n    if (element === undefined) {\n      return false;\n    }\n    return (_a = element.$attrs$) === null || _a === void 0 ? void 0 : _a[\"data-taskbar-divider\"];\n  }\n  removeEmpty(elements) {\n    let lastElem;\n    return elements.filter(elem => {\n      if (elem == undefined) {\n        return false;\n      }\n      if (this.isDivider(lastElem) && this.isDivider(elem)) {\n        return false;\n      }\n      lastElem = elem;\n      return true;\n    });\n  }\n  appendCustomElementsInTaskbar() {\n    this._customElementsId.forEach(id => {\n      const elementId = id.replace(this.TASKBAR_ITEM_ID_PREFIX, '');\n      const customElement = this._customElements.get(elementId);\n      const container = this._element.querySelector(`#${id}`);\n      if (container) {\n        container === null || container === void 0 ? void 0 : container.appendChild(customElement);\n      }\n      else {\n        this.unlinkCustomElementFromTaskbar(customElement);\n      }\n    });\n  }\n  addCustomElementContainer(elem) {\n    var _a;\n    const elementId = `${this.TASKBAR_ITEM_ID_PREFIX}${elem}`;\n    if (!this._customElementsId.includes(elementId)) {\n      this._customElementsId.push(elementId);\n      (_a = this._overFlowWatcher) === null || _a === void 0 ? void 0 : _a.addNotOverFlowElement(elementId);\n    }\n    return h(\"span\", { class: \"ez-padding-left--medium\", key: elementId, id: elementId });\n  }\n  getCustomElements(searchOnDocument) {\n    var _a, _b;\n    this._customElementsId = [];\n    this._customElements = new Map();\n    this._slotContainer = this.buildSlotContainer(searchOnDocument);\n    const customElementsArray = Array.from((_b = (_a = this._slotContainer) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : []);\n    customElementsArray.forEach(item => this._customElements.set(item.id, item));\n  }\n  buildSlotContainer(searchOnDocument) {\n    let slotContainer;\n    if (this.customContainerId) {\n      const container = document.querySelector(`#${this.customContainerId}`);\n      slotContainer = container === null || container === void 0 ? void 0 : container.querySelector(`#${this.customSlotId}`);\n    }\n    else {\n      slotContainer = this._element.querySelector(`#${this.customSlotId}`);\n    }\n    // Caso nõa encontre o slot container dentro do próprio elemento, tenta buscar na DOM do document.\n    if (searchOnDocument && !slotContainer) {\n      slotContainer = document.querySelector(`#${this.customSlotId}`);\n    }\n    return slotContainer;\n  }\n  componentWillLoad() {\n    this._application = ApplicationContext.getContextValue(\"__SNK__APPLICATION__\");\n    if (this._application) {\n      this._application.getAllAccess(this.resourceID).then(access => this._permissions = access);\n    }\n    else {\n      this._permissions = {};\n    }\n    this.getCustomElements();\n  }\n  componentWillRender() {\n    this.handleDefinitions();\n    this.validatePresentationMode();\n    this.updateOverFlowIfNeeded();\n  }\n  handleDefinitions() {\n    if (this._definitions == undefined && this._permissions) {\n      this._definitions = this.elementsFromString(this.buttons);\n    }\n  }\n  updateOverFlowIfNeeded() {\n    if (this._hasToUpdateOverFlow) {\n      requestAnimationFrame(() => { var _a; return (_a = this._overFlowWatcher) === null || _a === void 0 ? void 0 : _a.forceUpdate(); });\n      this._hasToUpdateOverFlow = false;\n    }\n  }\n  handleOverFlow(overFlowingElements) {\n    const elementsToHandle = overFlowingElements.filter(element => !this.hasToIgnoreOverFlow(element));\n    this.resetOverFlowedElements();\n    this.doOverFlowElements(elementsToHandle);\n  }\n  resetOverFlowedElements() {\n    this._overFlowedElements.forEach(element => {\n      element.classList.remove(OVERFLOWED_CLASS_NAME);\n    });\n    this._hiddenActionsList = [];\n    this._overFlowedElements = [];\n  }\n  doOverFlowElements(overFlowedElements) {\n    overFlowedElements.forEach(element => {\n      element.classList.add(OVERFLOWED_CLASS_NAME);\n      this._overFlowedElements.push(element);\n      this.addItemToActionList(element);\n    });\n  }\n  addItemToActionList(element) {\n    const taskbarElement = this.getTaskbarElementName(element);\n    if (taskbarElement && this.isEnabled(taskbarElement) && this.isAllowed(taskbarElement)) {\n      const optionItem = {\n        value: taskbarElement,\n        label: this.getTaskbarElementLabel(element),\n        iconName: this.getTaskbarElementIcon(element)\n      };\n      this._hiddenActionsList.push(optionItem);\n    }\n  }\n  getTaskbarElementName(element) {\n    var _a;\n    return (_a = element.getAttribute('data-taskbar-element')) !== null && _a !== void 0 ? _a : \"\";\n  }\n  getTaskbarElementIcon(element) {\n    var _a;\n    return (_a = element.getAttribute('data-taskbar-icon')) !== null && _a !== void 0 ? _a : \"\";\n  }\n  getTaskbarElementLabel(element) {\n    var _a;\n    return (_a = element.getAttribute('data-taskbar-label')) !== null && _a !== void 0 ? _a : \"\";\n  }\n  hasToIgnoreOverFlow(element) {\n    return element.classList.contains(this.TASKBAR_CUSTOM_ELEMENTS_CONTAINER_CLASS_NAME);\n  }\n  handleOverFlowStrategy() {\n    if (this.overflowStrategy === 'hiddenItems') {\n      this._overFlowWatcher = new OverflowWatcher(this.buildOverFlowWatcherParams());\n    }\n  }\n  buildOverFlowWatcherParams() {\n    return {\n      element: this._element,\n      callback: this.handleOverFlow.bind(this),\n      overFlowDirection: OverflowDirection.HORIZONTAL,\n      notOverFlow: this.NOT_OVERFLOW_ELEMENTS\n    };\n  }\n  componentDidLoad() {\n    const dataInfo = { dataUnit: this.dataUnit };\n    ElementIDUtils.addIDInfo(this._element, null, dataInfo);\n    this.handleOverFlowStrategy();\n    this.dataUnit.subscribe(this.onSaveEvent);\n  }\n  componentDidRender() {\n    this.appendCustomElementsInTaskbar();\n    this.updateLastWidth();\n  }\n  updateLastWidth() {\n    this._lastWidth = this._element.getBoundingClientRect().width;\n  }\n  disconnectedCallback() {\n    var _a, _b;\n    (_a = this.dataUnit) === null || _a === void 0 ? void 0 : _a.unsubscribe(this.onSaveEvent);\n    this.unlinkAllCustomElements();\n    (_b = this._overFlowWatcher) === null || _b === void 0 ? void 0 : _b.destroy();\n  }\n  unlinkAllCustomElements() {\n    var _a;\n    (_a = this._customElementsId) === null || _a === void 0 ? void 0 : _a.forEach(id => {\n      const elementId = id.replace(this.TASKBAR_ITEM_ID_PREFIX, '');\n      const customElement = this._customElements.get(elementId);\n      this.unlinkCustomElementFromTaskbar(customElement);\n    });\n  }\n  unlinkCustomElementFromTaskbar(customElement) {\n    this._slotContainer.appendChild(customElement);\n  }\n  render() {\n    var _a;\n    if (this._definitions === undefined) {\n      return undefined;\n    }\n    let index = 0;\n    return (h(Host, { class: this.getHostClasses() }, this.removeEmpty(this._definitions.map((elem) => {\n      var _a, _b;\n      index++;\n      if (TaskbarElement[elem]) {\n        return this.getElement(index, TaskbarElement[elem]);\n      }\n      if ((_a = this.customButtons) === null || _a === void 0 ? void 0 : _a.has(elem)) {\n        return this.getElement(index, this.customButtons.get(elem));\n      }\n      if (this._customElements.has(elem)) {\n        return this.addCustomElementContainer(elem);\n      }\n      (_b = this._overFlowWatcher) === null || _b === void 0 ? void 0 : _b.addNotOverFlowElement(elem);\n      return h(\"slot\", { name: elem });\n    })), h(\"div\", { id: this.TASKBAR_CUSTOM_ELEMENTS, class: this.TASKBAR_CUSTOM_ELEMENTS_CONTAINER_CLASS_NAME }, h(\"slot\", { name: this.customSlotId }), (_a = this._overFlowWatcher) === null || _a === void 0 ? void 0 :\n      _a.addNotOverFlowElement(this.TASKBAR_CUSTOM_ELEMENTS))));\n  }\n  getHostClasses() {\n    if (this.overflowStrategy !== 'hiddenItems')\n      return 'no-wrap';\n    return `full-width ${this.alignRigth ? 'align-right' : \"\"}`;\n  }\n  get _element() { return getElement(this); }\n  static get watchers() { return {\n    \"buttons\": [\"observeButtons\"],\n    \"disabledButtons\": [\"observeDisabledButtons\"],\n    \"_lastWidth\": [\"observeLastWidth\"],\n    \"_isWaitingForSave\": [\"observeIsWaitingForSave\"]\n  }; }\n};\nSnkTaskbar.style = snkTaskbarCss;\n\nexport { SnkTaskbar as snk_taskbar };\n"],"names":["snkTaskbarCss","SnkTaskbar","hostRef","registerInstance","createEvent","TaskbarElement","action","Action","PresentationMode","event","_a","newValue","oldValue","strButtons","elements","buttonName","VisibleWhenForbidden","AuthorizationElements","AuthorizationConfig","element","key","elem","LockManager","LockManagerOperation","err","SilentException","index","def","className","taskbarElement","dataExporterStoreKey","buildElem","buildCustomButton","taskbarElem","StringUtils","btnCustom","lastElem","id","elementId","customElement","container","h","searchOnDocument","_b","item","slotContainer","ApplicationContext","access","overFlowingElements","elementsToHandle","OVERFLOWED_CLASS_NAME","overFlowedElements","optionItem","OverflowWatcher","OverflowDirection","dataInfo","ElementIDUtils","Host","getElement"],"mappings":"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","x_google_ignoreList":[0]}